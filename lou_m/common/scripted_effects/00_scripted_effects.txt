#Unsorted Scripted effects:

#General effect for extending or adding province modifier
#Province Scope
add_or_extend_province_modifier_effect = {
	if = {
		limit = {
			has_province_modifier = $MODIFIER$
		}
		extend_province_modifier = { name = $MODIFIER$ duration = $DURATION$ }
	}
	else = {
		add_province_modifier = { name = $MODIFIER$ duration = $DURATION$ }
	}
}

#Used in army professionalism event:
#used where FROM is a province and ROOT is a country, ie onaction for provinces fallen
add_loot_from_province_effect = { 
	if = {
		limit = {
			FROM = {
				NOT = { development = 18 }
			}
		}
		add_treasury = 115
		add_mil_power = 15
	}
	if = {
		limit = {
			FROM = {
				development = 18
				NOT = { development = 21 }
			}
		}
		add_treasury = 135
		add_mil_power = 15
	}
	if = {
		limit = {
			FROM = {
				development = 21
				NOT = { development = 24 }
			}
		}
		add_treasury = 155
		add_mil_power = 25
	}
	if = {
		limit = {
			FROM = {
				development = 24
				NOT = { development = 27 }
			}
		}
		add_treasury = 180
		add_mil_power = 30
	}
	if = {
		limit = {
			FROM = {
				development = 27
				NOT = { development = 30 }
			}
		}
		add_treasury = 210
		add_mil_power = 40
	}
	if = {
		limit = {
			FROM = {
				development = 30
				NOT = { development = 33 }
			}
		}
		add_treasury = 230
		add_mil_power = 50
	}
	if = {
		limit = {
			FROM = {
				development = 33
			}
		}
		add_treasury = 250
		add_mil_power = 55
	}
}

#Generalized version of the same effect, for use in province scope.
#used where ROOT is a province, ie onaction for provinces fallen
#$LOOTER$ is the scope of the tag performing the Looting (so for instance owner)
add_loot_from_rich_province_general_effect = { 
	add_devastation = 80
	remove_loot = {
		who = $LOOTER$
		amount = 1000
	}
	if = {
		limit = {
			NOT = { development = 18 }
		}
		$LOOTER$ = {
			add_treasury = 400
			add_mil_power = 15
		}
	}
	if = {
		limit = {
			development = 18
			NOT = { development = 21 }
		}
		$LOOTER$ = {
			add_treasury = 435
			add_mil_power = 15
		}
	}
	if = {
		limit = {
			development = 21
			NOT = { development = 24 }
		}
		$LOOTER$ = {
			add_treasury = 455
			add_mil_power = 25
		}
	}
	if = {
		limit = {
			development = 24
			NOT = { development = 27 }
		}
		$LOOTER$ = {
			add_treasury = 480
			add_mil_power = 30
		}
	}
	if = {
		limit = {
			development = 27
			NOT = { development = 30 }
		}
		$LOOTER$ = {
			add_treasury = 510
			add_mil_power = 40
		}
	}
	if = {
		limit = {
			development = 30
			NOT = { development = 33 }
		}
		$LOOTER$ = {
			add_treasury = 530
			add_mil_power = 50
		}
	}
	if = {
		limit = {
			development = 33
		}
		$LOOTER$ = {
			add_treasury = 550
			add_mil_power = 55
		}
	}
}

#Religious Schools:
#Country Scope
clear_religious_scholar_modifiers_effect = {
	remove_country_modifier = hanafi_scholar_modifier
	remove_country_modifier = hanbali_scholar_modifier
	remove_country_modifier = maliki_scholar_modifier
	remove_country_modifier = shafii_scholar_modifier
	remove_country_modifier = ismaili_scholar_modifier
	remove_country_modifier = jafari_scholar_modifier
	remove_country_modifier = zaidi_scholar_modifier
}

#Move capital along with all that also needs to be done. Used in capital decisions.
#THIS = Province Scope, ROOT = Country Scope
move_capital_effect = {
	if = {
		limit = {
			is_part_of_hre = yes
			ROOT = {
				is_part_of_hre = no
			}
		}
		set_in_empire = no
		emperor = {
			add_opinion = {
				who = ROOT
				modifier = hre_province_left
			}
		}
		add_imperial_influence = -1
	}
	if = {
		limit = { is_capital = no }
		ROOT = {
			set_capital = PREV
		}
	}
}

#Same as move_capital_effect, but for when you want to move PREV's rather than ROOT's capital
#THIS = Province Scope, PREV = Country Scope
prev_move_capital_effect = {
	if = {
		limit = {
			is_part_of_hre = yes
			PREV = {
				is_part_of_hre = no
			}
		}
		set_in_empire = no
		PREV = {
			emperor = {
				add_opinion = {
					who = PREV
					modifier = hre_province_left
				}
			}
		}
		add_imperial_influence = -1
	}
	if = {
		limit = { is_capital = no }
		PREV = {
			set_capital = PREV
		}
	}
}

remove_non_electors_emperors_from_empire_effect = {
	if = {
		limit = {
			is_part_of_hre = yes
			is_elector = no
			is_emperor = no
		}
		custom_tooltip = remove_non_electors_emperors_from_empire_effect_tooltip
		hidden_effect = {
			every_owned_province = {
				limit = {
					is_part_of_hre = yes
				}
				set_in_empire = no
			}
		}
	}
}

abolish_slavery_effect = {
	custom_tooltip = abolished_slavery_act_tooltip
	hidden_effect = {
		every_owned_province = {
			limit = {
				trade_goods = slaves
			}
			change_trade_goods = unknown
			remove_building = tradecompany
		}
	}
}


add_vassalise_cb_effect = {
	add_casus_belli = {
		type = cb_vassalize_mission
		months = 300
		target = ROOT
	}
}
remove_vassalise_cb_effect = {
	if = {
		limit = {
			has_casus_belli = {
				type = cb_vassalize_mission
				target = event_target:agenda_country
			}
		}
		remove_casus_belli = {
			type = cb_vassalize_mission
			target = event_target:agenda_country
		}
	}
}

#Ends the normal Revolution disaster (if you have it) and clears all related modifiers and flags
clear_standard_revolution_elements_effect = {
	if = {
		limit = {
			has_disaster = revolution
		}
		end_disaster = revolution
	}

	clr_country_flag = religious_revolution
	clr_country_flag = serfdom
	clr_country_flag = social_reform
	clr_country_flag = royal_bureaucracy
	clr_country_flag = deplorable_reign
	clr_country_flag = road_to_bankruptcy
	clr_country_flag = financial_crisis
	clr_country_flag = revolutionary_philosopher
	remove_country_modifier = religious_intolerance
	remove_country_modifier = religious_tolerance
	remove_country_modifier = restrict_serfdom
	remove_country_modifier = enforce_serfdom
	remove_country_modifier = suppress_free_thinkers
	remove_country_modifier = bureaucratic_reduction
	remove_country_modifier = bureaucratic_expansion
	remove_country_modifier = support_monarch
	remove_country_modifier = oppose_monarch
	remove_country_modifier = mint_money
	remove_country_modifier = fight_inflation
	remove_country_modifier = disarmament
	remove_country_modifier = financial_disaster
}

enact_revolution_effect = {
	disband_rebels = revolutionary_rebels
	disband_rebels = anti_tax_rebels
	hidden_effect = {
		if = {	
			limit = {
				any_subject_country = {
					has_country_modifier = colony_inspired_by_revolution
				}
			}
			every_subject_country = {
				remove_country_modifier = colony_inspired_by_revolution
			}
		}
		if = {
			limit = {
				OR = {
					has_disaster = french_revolution
					has_country_flag = use_french_disaster_exile_effect
				}
				has_regency = no
			}
			set_country_flag = ruler_of_france_exiled
		}
		if = {
			limit = {
				OR = {
					has_disaster = french_revolution
					has_country_flag = use_french_disaster_exile_effect
				}
				has_heir = yes
			}
			exile_heir_as = heir_of_france
			set_country_flag = heir_of_france_exiled
		}
	}
	if = {
		limit = { is_emperor_of_china = yes }
		dismantle_empire_of_china = yes
		set_global_flag = empire_of_china_dismantled
	}
	if = {
		limit = { NOT = { government = republic } }
		change_government_to_republic = yes
	}
	if = {
		limit = {
			revolution_target_exists = yes
		}
		add_government_reform = junior_revolutionary_republic_reform
	}
	else = {
		add_government_reform = revolutionary_republic_reform
		set_revolution_target = ROOT
	}
	if = {
		limit = { has_reform = parliamentary_reform }
		remove_government_reform = parliamentary_reform
	}
	if = {
		limit = { has_reform = states_general_reform }
		remove_government_reform = states_general_reform
	}
	if = {
		limit = {
			OR = {
				has_disaster = french_revolution
				has_country_flag = use_french_disaster_exile_effect
			}
		}
		hidden_effect = {
			exile_ruler_as = { name = ruler_of_france }
		}
	}
	else = {
		kill_ruler = yes
	}

	add_yearly_manpower = 5

	if = {
		limit = {
			has_country_flag = revolution_disaster_reactionary
		}
		add_country_modifier = {
			name = reactionaries_failed
			duration = 9125
		}
	}

	if = {
		limit = {
			has_country_flag = revolution_disaster_immediate_revolution
		}
		clr_country_flag = revolution_disaster_immediate_revolution
	}
	set_country_flag = revolutionary_republic_flag
	
	if = { 
		limit = { tag = FRA has_dlc = "Domination" } 
		swap_non_generic_missions = yes
	}
}

#province scope
add_half_industrialization_effect = {
	
}

#province scope
add_quarter_industrialization_effect = {
	
}

#province scope, chooses which random monarch point bonus to give for agendas
choose_random_development_bonus_effect = {
	random_list = {
		1 = { set_province_flag = add_base_tax_flag }
		1 = { set_province_flag = add_base_production_flag }
		1 = { set_province_flag = add_base_manpower_flag }
	}
}
apply_random_development_bonus_bonus_effect = {
	trigger_switch = {
		on_trigger = has_province_flag
		add_base_tax_flag = { add_base_tax = 1 }
		add_base_production_flag = { add_base_production = 1 }
		add_base_manpower_flag = { add_base_manpower = 1 }
	}
	clear_random_development_bonus_flags_effect = yes
}
clear_random_development_bonus_flags_effect = {
	clr_province_flag = add_base_tax_flag
	clr_province_flag = add_base_production_flag
	clr_province_flag = add_base_manpower_flag
}
#province scope, should be used whenever the revolution is removed from a province
remove_revolution_from_province_effect = {
	hidden_effect = { set_revolution_in_province = no }
	custom_tooltip = no_spread_here_for_15_years_tt
	add_province_modifier = {
		name = no_revolution_here_dummy
		duration = 5475
		hidden = yes
	}
}


spawn_small_scaled_rebels = {
	#always specify type
	#specify saved_name = <saved_name> if you want to use one of those
	#specify leader and leader_dynasty if you want to do it that way
	#otherwise state "no_defined_leader = yes"
	if = {
		limit = {
			owner = {
				total_development = 1000
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 3
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $saved_name$
			}
		]
	}
	else_if = {
		limit = {
			owner = {
				total_development = 500
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 2
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 2
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 2
				type = $type$
				leader = $saved_name$
			}
		]
	}
	else_if = {
		limit = {
			owner = {
				total_development = 200
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 1.5
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 1.5
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 1.5
				type = $type$
				leader = $saved_name$
			}
		]
	}
	else = {
		[[no_defined_leader]
			spawn_rebels = {
				size = 1
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 1
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 1
				type = $type$
				leader = $saved_name$
			}
		]
	}
}
spawn_large_scaled_rebels = {
	#always specify type
	#specify saved_name = <saved_name> if you want to use one of those
	#specify leader and leader_dynasty if you want to do it that way
	#otherwise state "no_defined_leader = yes"
	if = {
		limit = {
			owner = {
				total_development = 2000
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 3
				type = $type$
			}
			spawn_rebels = {
				size = 2
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
			spawn_rebels = {
				size = 2
				type = $type$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $saved_name$
			}
			spawn_rebels = {
				size = 2
				type = $type$
			}
		]
	}
	else_if = {
		limit = {
			owner = {
				total_development = 1000
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 3
				type = $type$
			}
			spawn_rebels = {
				size = 1
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
			spawn_rebels = {
				size = 1
				type = $type$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $saved_name$
			}
			spawn_rebels = {
				size = 1
				type = $type$
			}
		]
	}
	else_if = {
		limit = {
			owner = {
				total_development = 500
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 3
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $saved_name$
			}
		]
	}
	else_if = {
		limit = {
			owner = {
				total_development = 200
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 2.5
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 2.5
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 2.5
				type = $type$
				leader = $saved_name$
			}
		]
	}
	else = {
		[[no_defined_leader]
			spawn_rebels = {
				size = 2
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 2
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 2
				type = $type$
				leader = $saved_name$
			}
		]
	}
}

#country scope. Currently just applies to the Hansa, if future ones are added, update the flags
#Used in nation formation decisions
restore_country_name_effect = {
	hidden_effect = {
		if = {
			limit = {
				has_country_flag = is_hanseatic_league_flag
			}
			restore_country_name = yes
			clr_country_flag = is_hanseatic_league_flag
		}
	}
}
#Used to clone the nation when forming a colonial tag.
restore_old_nation_on_formation_effect = {
	if = {
		limit = {
			NOT = { is_former_colonial_nation = yes }
		}
		custom_tooltip = loses_old_world_provs_tt
	}
	hidden_effect = {
		if = {
			limit = {
				has_country_flag = was_not_former_colonial_nation
			}
			every_province = {
				limit = {
					is_core = ROOT
					OR = {
						continent = europe
					}
				}
				add_core = event_target:old_tag_target
				remove_core = ROOT
			}
			release = event_target:old_tag_target
			event_target:old_tag_target = { swap_non_generic_missions = yes }
			ROOT = { set_country_flag = old_world_to_new_world_flag }
			ROOT = { set_country_flag = no_colonial_nations }
			every_subject_country = {
				limit = {
					capital_scope = { 
						OR = {
							continent = europe
						}
					}
				}
				grant_independence = yes
			}
			every_subject_country = {
				limit = {
					OR = {
						is_subject_of_type = colony
						is_subject_of_type = crown_colony
						is_subject_of_type = private_enterprise
						is_subject_of_type = self_governing_colony
					}
				}
				ROOT = { inherit = PREV }
			}
			if = {
				limit = {
					NOT = { government_rank = 2 }
				}
				event_target:old_tag_target = { set_government_rank = 1 }
			}
			else_if = {
				limit = {
					government_rank = 3
				}
				event_target:old_tag_target = { set_government_rank = 3 }
			}
			if = {
				limit = {
					government = monarchy
				}
				event_target:old_tag_target = {
					change_government = monarchy
					add_government_reform = feudalism_reform
					#set_legacy_government = monarchy
					define_ruler = {
						dynasty = ROOT
						claim = 95
					}
				}
			}
		}
	}
}

change_government_to_republic = {
	if = {
		limit = {
			NOT = { government = republic }
		}
		change_government = republic
		change_government_reform_progress = -200
	}
}
change_government_to_monarchy = {
	if = {
		limit = {
			NOT = { government = monarchy }
		}
		if = {
			limit = {
				government = republic
			}
			change_government = monarchy
			change_government_reform_progress = -400
		}
		else = {
			change_government = monarchy
			change_government_reform_progress = -200
		}
	}
}
change_government_to_theocracy = {
	if = {
		limit = {
			NOT = { government = theocracy }
		}
		if = {
			limit = {
				government = republic
			}
			change_government = theocracy
			change_government_reform_progress = -400
		}
		else = {
			change_government = theocracy
			change_government_reform_progress = -200
		}
	}
}
change_government_to_tribal = {
	if = {
		limit = {
			NOT = { government = tribal }
		}
		change_government = tribal
		change_government_reform_progress = -800
	}
}

#The three effects below are used for setting a great project to exact the tier
#I tried to combine the three effects into one single scripted effect, but I couldn't figure a way out to do the effect without having to do a lot of custom tooltip
#Sets monument tier 1 (has no effect if the monument is tier 1 or higher)
#Province scope
set_great_project_tier_1 = {
	if = {
		limit = {
			has_dlc = "Leviathan"
		}
	if = {
		limit = {
				has_great_project = {	#Asks the EXACT tier unlike other triggers
					type = $type$
					tier = 0
				}
			}
			add_great_project_tier = {
				type = $type$
				tier = 1
			}
		}
		else = {
			random_list = {
				1 = { add_base_tax = 2 }
				1 = { add_base_production = 2 }
				1 = { add_base_manpower = 2 }
			}
		}
}
	else = {
		add_base_tax = 1
		add_base_production = 1
		add_base_manpower = 1
	}
}
#Sets monument tier 2 (has no effect if the monument is tier 2 or higher)
#Province scope
set_great_project_tier_2 = {
	if = {
		limit = {
			has_dlc = "Leviathan"
		}
		if = {
			limit = {
				has_great_project = {
					type = $type$
					tier = 2
				}
			}
			random_list = {
				1 = { add_base_tax = 4 }
				1 = { add_base_production = 4 }
				1 = { add_base_manpower = 4 }
			}
		}
		if = {
			limit = {
				has_great_project = {
					type = $type$
					tier = 1
				}
				NOT = {
					has_great_project = {
						type = $type$
						tier = 2
					}
				}
			}
			add_great_project_tier = {
				type = $type$
				tier = 1
			}
			random_list = {
				1 = { add_base_tax = 2 }
				1 = { add_base_production = 2 }
				1 = { add_base_manpower = 2 }
			}
		}
		if = {
			limit = {
				has_great_project = {	#Asks the EXACT tier unlike other triggers
					type = $type$
					tier = 0
				}
				NOT = {
					has_great_project = {
						type = $type$
						tier = 1
					}
				}
			}
			add_great_project_tier = {
				type = $type$
				tier = 2
			}
		}
	}
	else = {
		add_base_tax = 1
		add_base_production = 1
		add_base_manpower = 1
	}
}
#Sets monument tier 3 (has no effect if the monument is tier 3 or higher)
#Province scope
set_great_project_tier_3 = {
	if = {
		limit = {
			has_dlc = "Leviathan"
		}
		if = {
			limit = {
				has_great_project = {
					type = $type$
					tier = 3
				}
			}
			random_list = {
				1 = { add_base_tax = 6 }
				1 = { add_base_production = 6 }
				1 = { add_base_manpower = 6 }
			}
		}
		if = {
			limit = {
				has_great_project = {
					type = $type$
					tier = 2
				}
				NOT = {
					has_great_project = {
						type = $type$
						tier = 3
					}
				}
			}
			add_great_project_tier = {
				type = $type$
				tier = 1
			}
			random_list = {
				1 = { add_base_tax = 4 }
				1 = { add_base_production = 4 }
				1 = { add_base_manpower = 4 }
			}
		}
		if = {
			limit = {
				has_great_project = {
					type = $type$
					tier = 1
				}
				NOT = {
					has_great_project = {
						type = $type$
						tier = 2
					}
				}
			}
			add_great_project_tier = {
				type = $type$
				tier = 2
			}
			random_list = {
				1 = { add_base_tax = 2 }
				1 = { add_base_production = 2 }
				1 = { add_base_manpower = 2 }
			}
		}
		if = {
			limit = {
				has_great_project = {	#Asks the EXACT tier unlike other triggers
					type = $type$
					tier = 0
				}
				NOT = {
					has_great_project = {
						type = $type$
						tier = 1
					}
				}
			}
			add_great_project_tier = {
				type = $type$
				tier = 3
			}
		}
	}
	else = {
		add_base_tax = 2
		add_base_production = 2
		add_base_manpower = 2
	}
}

#Country effect
create_colony_mission_reward = {
	if = {
		limit = {
			$province$ = {
				is_empty = yes
			}
		}
		$province$ = {
			add_siberian_construction = 400
		}
		if = {
			limit = {
				has_age_ability = ab_colony_boost_development
			}
			$province$ = {
				add_base_tax = 1
				add_base_production = 1
				add_base_manpower = 1
			}
		}
	}
	else_if = {
		limit = {
			owns = $province$
		}
		$province$ = {
			add_base_tax = 1
			add_base_production = 1
			add_base_manpower = 1
		}
	}
	else_if = {
		limit = {
			NOT = { is_permanent_claim = $province$ }
		}
		add_permanent_claim = $province$
	}
}
#Country effect
seize_empty_province_effect = {
	if = {
		limit = {
			$province$ = {
				is_empty = yes
			}
		}
		$province$ = {
			cede_province = ROOT
			add_core = ROOT
		}
	}
	else_if = {
		limit = { NOT = { owns_or_non_sovereign_subject_of = $province$ } }
		add_core = $province$
	}
	else = {
		$province$ = {
			add_base_tax = 1
			add_base_production = 1
			add_base_manpower = 1
		}
	}
}
#Provine effect
create_colony_mission_reward_province = {
	if = {
		limit = {
			is_empty = yes
		}
		add_siberian_construction = 400
		if = {
			limit = {
				$country$ = {
					has_age_ability = ab_colony_boost_development
				}
			}
			add_base_tax = 1
			add_base_production = 1
			add_base_manpower = 1
		}
	}
	else_if = {
		limit = {
			owned_by = $country$
		}
		add_base_tax = 1
		add_base_production = 1
		add_base_manpower = 1
	}
	else_if = {
		limit = {
			NOT = { is_permanent_claim = $country$ }
		}
		add_permanent_claim = $country$
	}
}

#Province effect
remove_random_development = {
	if = {
		limit = {
			base_tax = 2
			base_production = 2
			base_manpower = 2
		}
		random_list = {
			33 = {
				add_base_tax = -1
			}
			33 = {
				add_base_production = -1
			}
			33 = {
				add_base_manpower = -1
			}
		}
	}
	else_if = {
		limit = {
			base_tax = 2
			base_production = 2
		}
		random_list = {
			50 = {
				add_base_tax = -1
			}
			50 = {
				add_base_production = -1
			}
		}
	}
	else_if = {
		limit = {
			base_tax = 2
			base_manpower = 2
		}
		random_list = {
			50 = {
				add_base_tax = -1
			}
			50 = {
				add_base_manpower = -1
			}
		}
	}
	else_if = {
		limit = {
			base_manpower = 2
			base_production = 2
		}
		random_list = {
			50 = {
				add_base_manpower = -1
			}
			50 = {
				add_base_production = -1
			}
		}
	}
	else_if = {
		limit = {
			base_tax = 2
		}
		add_base_tax = -1
	}
	else_if = {
		limit = {
			base_production = 2
		}
		add_base_production = -1
	}
	else_if = {
		limit = {
			base_manpower = 2
		}
		add_base_manpower = -1
	}
}

#Country effect
mal_add_disaster_stability = {

}

#Country effect
add_inflation_scaled_to_trade = {
	[[custom_tooltip] 
		custom_tooltip = $custom_tooltip$
	]
	#custom_tooltip = add_inflation_scaled_to_trade_tt	#Make sure to define an own custom tooltip for telling how much inflation per trade percantage should be given
	hidden_effect = {
		export_to_variable = {
			which = trade_income_variable
			value = trigger_value:trade_income_percentage
		}
		multiply_variable = {
			which = trade_income_variable
			value = 100
		}
		multiply_variable = {
			which = trade_income_variable
			value = $inflation$
		}
		while = {
			limit = {
				check_variable = {
					which = trade_income_variable
					value = 1
				}
			}
			add_inflation = 1
			subtract_variable = {
				which = trade_income_variable
				value = 1
			}
		}
		multiply_variable = {
			which = trade_income_variable
			value = 100
		}
		while = {
			limit = {
				check_variable = {
					which = trade_income_variable
					value = 1
				}
			}
			add_inflation = 0.01
			subtract_variable = {
				which = trade_income_variable
				value = 1
			}
		}
	}
}

#Country "effect"
mal_determine_offer_acceptance = {
	if = {
		limit = {
			mal_will_accept_offer = {
				province = $province$
			}
		}
		$province$ = {
			owner = {
				custom_tooltip = mal_will_accept_offer
			}
		}
	}
	else_if = {
		limit = {
			mal_very_highly_to_accept_offer = {
				province = $province$
			}
		}
		$province$ = {
			owner = {
				custom_tooltip = mal_will_probably_accept_offer
			}
		}
	}
	else_if = {
		limit = {
			mal_might_or_might_not_accept_offer = {
				province = $province$
			}
		}
		$province$ = {
			owner = {
				custom_tooltip = mal_could_accept_offer
			}
		}
	}
	else_if = {
		limit = {
			mal_very_likely_to_not_accept_offer = {
				province = $province$
			}
		}
		$province$ = {
			owner = {
				custom_tooltip = mal_will_probably_not_accept_offer
			}
		}
	}
	else_if = {
		limit = {
			mal_will_never_accept_offer = {
				province = $province$
			}
		}
		$province$ = {
			owner = {
				custom_tooltip = mal_will_naver_accept_offer
			}
		}
	}
	else = {
		$province$ = {
			owner = {
				custom_tooltip = mal_offer_outcome_unkonwn
			}
		}
	}
}

#Country effect
#add_increase_same_religion_opinion = {
#	custom_tooltip = increase_same_religion_opinion_tt
#	hidden_effect = {
#		set_country_flag = has_increased_religios_opinion
#		every_known_country = {
#			limit = {
#				OR = {
#					ROOT = { has_harmonized_with = PREV }
#					religion = ROOT
#				}
#				NOT = {
#					has_opinion_modifier = {
#						who = ROOT
#						modifier = increased_same_religion
#					}
#				}
#			}
#			add_opinion = {
#				who = ROOT
#				modifier = increased_same_religion
#			}
#			reverse_add_opinion = {
#				who = ROOT
#				modifier = increased_same_religion
#			}
#		}
#	}
#}

#Country effect
#remove_increase_same_religion_opinion = {
#	custom_tooltip = remove_increase_same_religion_opinion_tt
#	hidden_effect = {
#		clr_country_flag = has_increased_religios_opinion
#		every_country = {
#			limit = {
#				has_opinion_modifier = {
#					who = ROOT
#					modifier = increased_same_religion
#				}
#			}
#			remove_opinion = {
#				who = ROOT
#				modifier = increased_same_religion
#			}
#			reverse_remove_opinion = {
#				who = ROOT
#				modifier = increased_same_religion
#			}
#		}
#	}
#}

#Country effect
add_increase_opinion_of_fetishists = {
	
}

#Country effect - make sure to add an own custom tooltip in form of: "Every §Y$religion$§! country will have their opinion of [Root.GetName] increased by §G+50§!."
add_opinion_of_religion = {
	hidden_effect = {
		set_country_flag = has_improve_opinion_flag
		set_country_flag = has_increased_$religion$_opinion
		every_known_country = {
			limit = {
				religion = $religion$
				NOT = {
					has_opinion_modifier = {
						who = ROOT
						modifier = increased_religion_opinion
					}
				}
			}
			add_opinion = {
				who = ROOT
				modifier = increased_religion_opinion
			}
			reverse_add_opinion = {
				who = ROOT
				modifier = increased_religion_opinion
			}
		}
	}
}

#Country effect - make sure to add a custom localization like: "Remove the opinion bonus of $religion$ countries for §Y[Root.GetName]§!."
remove_religious_opinion_for_scope = {
	hidden_effect = {
		clr_country_flag = has_improve_opinion_flag
		clr_country_flag = has_increased_$religion$_opinion
		every_country = {
			limit = {
				religion = $religion$
				has_opinion_modifier = {
					who = ROOT
					modifier = increased_religion_opinion
				}
			}
			remove_opinion = {
				who = ROOT
				modifier = increased_religion_opinion
			}
			reverse_remove_opinion = {
				who = ROOT
				modifier = increased_religion_opinion
			}
		}
	}
}

#Country effect
add_temporary_colonist = {
	add_country_modifier = {
		name = temporary_colonist
		duration = $duration$
	}
	custom_tooltip = add_temporary_colonist_tt
}
remove_temporary_colonist = {
	hidden_effect = {
		remove_country_modifier = temporary_colonist
	}
}

#Country effect
#Make sure to make your own custom tooltip for it because parameters can't be given as input. Sadly.
transfer_treasury = {
	#custom_tooltip = transfer_treasury_tt	#Transfer §Y[$giver$.$variable$.GetValue]§! Ducats to $Y[$taker$.GetName]§!.
	hidden_effect = {
		$giver$ = {
			while = {
				limit = {
					check_variable = {
						which = $variable$
						value = 1
					}
				}
				$taker$ = {
					add_treasury = 1
				}
				add_treasury = -1
				subtract_variable = {
					which = $variable$
					value = 1
				}
			}
			multiply_variable = {
				which = $variable$
				value = 100
			}
			while = {
				limit = {
					check_variable = {
						which = $variable$
						value = 1
					}
				}
				$taker$ = {
					add_treasury = 0.01
				}
				add_treasury = -0.01
				subtract_variable = {
					which = $variable$
					value = 1
				}
			}
		}
	}
	[[custom_tooltip]
		custom_tooltip = $custom_tooltip$
	]
}

#Country effect
set_prestige_to_zero = {
	custom_tooltip = set_prestige_to_zero_tt
	hidden_effect = {
		add_prestige = -200
		add_prestige = 100
	}
}

#Country effect
enable_cult_for_heirs = {
	custom_tooltip = enable_cult_for_heirs_tt
	
}

#Country effect
enable_cult_for_heirs_mission = {
	custom_tooltip = enable_cult_for_heirs_tt
	
}

#Country effect
remove_heir_cult = {
	
}

disable_cult_for_heirs = {
	custom_tooltip = disable_cult_for_heirs_tt
	hidden_effect = {
		remove_heir_cult = yes
		clr_country_flag = enabled_cult_for_heirs
	}
}

#Country effect
unlock_cult_through_selection = {
	custom_tooltip = unlock_cult_through_selection_tt

}

#Country effect
half_estate_privilege_absolutism_loss = {
	custom_tooltip = half_estate_privilege_absolutism_loss_tt
	hidden_effect = {
		set_country_flag = has_halved_absolutism_reduction
	}
}

#Province effect
spawn_country_religious_rebels = {
	
}

#Province effect
spawn_province_religious_rebels = {
	
}

#Country effect
disable_annexation_penalty = {
	custom_tooltip = disable_annexation_penalty_tt
	hidden_effect = {
		set_country_flag = no_integrate_penalty
		remove_country_modifier = annexers_legacy
	}
}

#Country effect
enable_annexation_penalty = {
	custom_tooltip = enable_annexation_penalty_tt
	hidden_effect = {
		clr_country_flag = no_integrate_penalty
	}
}

#Country effect
enable_cult_switching = {
	custom_tooltip = enable_cult_switching_tt
	hidden_effect = {
		set_country_flag = enabled_cult_switching
	}
}
enable_cult_switching_mission = {
	custom_tooltip = enable_cult_switching_tt
	hidden_effect = {
		set_country_flag = enabled_cult_switching_mission
	}
}

#Country effect
disable_cult_switching = {
	custom_tooltip = disable_cult_switching_tt
	hidden_effect = {
		clr_country_flag = enabled_cult_switching
	}
}

#Country effect
enable_development_on_buildings_built = {
	custom_tooltip = enable_development_on_buildings_built_tt
	hidden_effect = {
		set_country_flag = improve_development_on_buildings_built
	}
}

#Province effect - used for buildings
add_development_from_building = {
	if = {
		limit = {
			FROM = { has_country_flag = improve_development_on_buildings_built }
			NOT = { gained_development_from_building = { building = $building$ } }
		}
		add_base_$type$ = $value$
		hidden_effect = {
			set_province_flag = built_dev_$building$
		}
	}
}

#Province effect - used for buildings
add_development_from_upgrading_or_building = {
	if = {
		limit = {
			FROM = { has_country_flag = improve_development_on_buildings_built }
			NOT = { gained_development_from_building = { building = $building$ } }
		}
		if = {
			limit = { has_province_flag = built_dev_$obsolete_building$ }
			add_base_$type$ = $upgrade_value$
		}
		else = {
			add_base_$type$ = $value$
		}
		hidden_effect = {
			set_province_flag = built_dev_$building$
		}
	}
}

#Province effect - used for buildings
remove_development_from_building = {
	if = {
		limit = {
			FROM = { has_country_flag = improve_development_on_buildings_built }
			gained_development_from_building = { building = $building$ }
		}
		add_base_$type$ = -$value$
		if = {
			limit = {
				NOT = { base_$type$ = 1 }
			}
			set_base_$type$ = 1
		}
		hidden_effect = {
			clr_province_flag = built_dev_$building$
		}
	}
}

#Province effect - used for buildings
update_improved_military_buildings_modifier = {
	
}

#Province effect
add_latest_building = {
	
}

#Province effect
upgrade_building = {
	
}

#Country effect - Make sure to make an own custom tooltip for it when using it "Gain §G$years$ years§! worth of Trade Income."
add_years_of_trade_income = {
	hidden_effect = {
		set_variable = {
			which = trade_years
			value = $years$
		}
		export_to_variable = {
			which = percentage_of_yearly_trade_income
			value = trigger_value:trade_income_percentage
		}
		export_to_variable = {
			which = yearly_trade_income
			value = trigger_value:monthly_income
		}
		multiply_variable = {
			which = yearly_trade_income
			which = percentage_of_yearly_trade_income
		}
		multiply_variable = {
			which = yearly_trade_income
			value = 12
		}
		while = {
			limit = {
				check_variable = {
					which = trade_years
					value = 1
				}
			}
			set_variable = {
				which = trade_income_added
				which = yearly_trade_income
			}
			while = {
				limit = {
					check_variable = {
						which = trade_income_added
						value = 1
					}
				}
				add_treasury = 1
				subtract_variable = {
					which = trade_income_added
					value = 1
				}
			}
			multiply_variable = {
				which = trade_income_added
				value = 100
			}
			while = {
				limit = {
					check_variable = {
						which = trade_income_added
						value = 1
					}
				}
				add_treasury = 0.01
				subtract_variable = {
					which = trade_income_added
					value = 1
				}
			}
			subtract_variable = {
				which = trade_years
				value = 1
			}
		}
	}
	[[custom_tooltip]
		custom_tooltip = $custom_tooltip$
	]
}

#Country effect
select_primary_cult = {
	change_cult = $cult$
	custom_tooltip = select_primary_cult_$cult$_tt
	custom_tooltip = tooltip_$cult$
	hidden_effect = {
		set_country_flag = has_$cult$_as_primary_cult
		add_country_modifier = {
			name = primary_$cult$
			duration = -1
		}
		if = {
			limit = { has_country_flag = enabled_cult_for_heirs }
			add_country_modifier = {
				name = junior_$cult$
				duration = -1
				desc = UNTIL_HEIR_SUCCESSION_OR_DEATH
			}
		}
	}
}

#Country effect
clear_previous_primary_cults = {
	
}

#Country effect - Triggers on monarch death - deprecated
clear_primary_cult_bonus = {
	
}

#Country effect
enable_primary_cult = {
	custom_tooltip = enable_primary_cult_tt
	
}

#Country effect
disable_primary_cult = {
	custom_tooltip = disable_primary_cult_tt
	hidden_effect = {
		clr_country_flag = uses_primary_cult
		clr_country_flag = has_selected_a_primary_cult
		clear_previous_primary_cults = yes
	}
}

#Country effect
disable_scholar_cost = {
	custom_tooltip = disable_scholar_cost_tt
	hidden_effect = {
		set_country_flag = no_scholar_adm_cost
	}
}

#Country effect
enable_scholar_cost = {
	custom_tooltip = enable_scholar_cost_tt
	hidden_effect = {
		clr_country_flag = no_scholar_adm_cost
	}
}

#Country effect - Estate
enable_baseline_invite_scholar = {
	custom_tooltip = enable_baseline_invite_scholar_tt
	hidden_effect = {
		set_country_flag = enabled_baseline_invite_scholar
	}
}

enable_baseline_invite_scholar_no_privilege = {
	custom_tooltip = enable_baseline_invite_scholar_tt
	hidden_effect = {
		set_country_flag = enabled_baseline_invite_scholar_no_priv
	}
}

allow_baseline_invite_scholar_privilege = {
	custom_tooltip = allows_every_time_invite_of_$religious_school$
	hidden_effect = {
		set_country_flag = privilege_can_always_invite_$religious_school$
	}
	custom_tooltip = allow_baseline_invite_scholar_privilege_tt
	custom_tooltip = $religious_school$_bonus_tt
}

disallow_baseline_invite_scholar = {
	hidden_effect = {
		clr_country_flag = privilege_can_always_invite_hanafi_school
		clr_country_flag = privilege_can_always_invite_hanbali_school
		clr_country_flag = privilege_can_always_invite_maliki_school
		clr_country_flag = privilege_can_always_invite_shafii_school
		clr_country_flag = privilege_can_always_invite_ismaili_school
		clr_country_flag = privilege_can_always_invite_jafari_school
		clr_country_flag = privilege_can_always_invite_zaidi_school
	}
}

disable_baseline_invite_scholar = {
	custom_tooltip = disable_baseline_invite_scholar_tt
	hidden_effect = {
		clr_country_flag = enabled_baseline_invite_scholar
		if = {
			limit = { NOT = { has_country_flag = enabled_baseline_invite_scholar_no_priv } }
			clr_country_flag = privilege_can_always_invite_hanafi_school
			clr_country_flag = privilege_can_always_invite_hanbali_school
			clr_country_flag = privilege_can_always_invite_maliki_school
			clr_country_flag = privilege_can_always_invite_shafii_school
			clr_country_flag = privilege_can_always_invite_ismaili_school
			clr_country_flag = privilege_can_always_invite_jafari_school
			clr_country_flag = privilege_can_always_invite_zaidi_school
		}
	}
}

#Country effect
enable_capital_slave_raid = {
	custom_tooltip = enable_capital_slave_raid_tt
	hidden_effect = {
		set_country_flag = enabled_capital_slave_raid
	}
	if = {
		limit = { has_dlc = "Leviathan" }
		custom_tooltip = enable_slave_raid_pillage_tt
	}
}

disable_capital_slave_raid = {
	custom_tooltip = disable_capital_slave_raid_tt
	hidden_effect = {
		clr_country_flag = enabled_capital_slave_raid
	}
	if = {
		limit = { has_dlc = "Leviathan" }
		custom_tooltip = disable_slave_raid_pillage_tt
	}
}

#On action effect
grant_manpower_from_besieging_fort = {
	if = {
		limit = {
			ROOT = {
				OR = {
					has_government_attribute = manpower_from_capturing_forts
					has_country_flag = enabled_capital_slave_raid
				}
			}
			FROM = {
				owner = {
					war_with = ROOT
				}
				NOT = { has_province_modifier = estate_nobles_neighbor_raids_fort }
			}
		}
		FROM = {
			add_province_modifier = {
				name = estate_nobles_neighbor_raids_fort
				duration = 1825
			}
		}
		if = {
			limit = { FROM = { fort_level = 1 } }
			ROOT = { add_yearly_manpower = 0.1 }
		}
		if = {
			limit = { FROM = { fort_level = 2 } }
			ROOT = { add_yearly_manpower = 0.1 }
		}
		if = {
			limit = { FROM = { fort_level = 3 } }
			ROOT = { add_yearly_manpower = 0.1 }
		}
		if = {
			limit = { FROM = { fort_level = 4 } }
			ROOT = { add_yearly_manpower = 0.1 }
		}
		if = {
			limit = { FROM = { fort_level = 5 } }
			ROOT = { add_yearly_manpower = 0.1 }
		}
		if = {
			limit = { FROM = { fort_level = 6 } }
			ROOT = { add_yearly_manpower = 0.1 }
		}
		if = {
			limit = { FROM = { fort_level = 7 } }
			ROOT = { add_yearly_manpower = 0.1 }
		}
		if = {
			limit = { FROM = { fort_level = 8 } }
			ROOT = { add_yearly_manpower = 0.1 }
		}
		if = {
			limit = { FROM = { fort_level = 9 } }
			ROOT = { add_yearly_manpower = 0.1 }
		}
		if = {
			limit = { FROM = { fort_level = 10 } }
			ROOT = { add_yearly_manpower = 0.1 }
		}
	}
}

slave_raid_pillage_capital_effect = {
	ROOT = {
		if = {
			limit = {
				has_country_flag = enabled_capital_slave_raid
			}
			add_yearly_manpower = 1
			random_owned_province = {
				limit = { trade_goods = slaves }
				add_base_production = 1
			}
		}
	}
}

#Country effect, event target
select_biggest_country_of_region = {
	if = {
		limit = { any_country = { capital_scope = { region = $region$ } } }
		if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 1000 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 1000 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 900 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 900 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 800 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 800 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 700 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 700 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 600 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 600 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 500 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 500 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 400 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 400 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 300 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 300 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 200 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 200 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 100 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 100 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } } }
			random_country = { 
				limit = { capital_scope = { region = $region$ } }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		set_country_flag = mal_visit_foreign_capital
	}
}

select_biggest_country_of_scope_type = {
	if = {
		limit = { 
			$trigger_scope$ = {
				$limit$ 
			} 
		}
		if = {
			limit = { 
				$trigger_scope$ = { 
					$limit$
					total_development = 1000
				}
			}
			$effect_scope$ = {
				limit = { 
					$limit$
					total_development = 1000 
				}
				save_event_target_as = selected_biggest_country
			}
		}
		else_if = {
			limit = { 
				$trigger_scope$ = { 
					$limit$
					total_development = 900
				}
			}
			$effect_scope$ = {
				limit = { 
					$limit$
					total_development = 900 
				}
				save_event_target_as = selected_biggest_country
			}
		}
		else_if = {
			limit = { 
				$trigger_scope$ = { 
					$limit$
					total_development = 800
				}
			}
			$effect_scope$ = {
				limit = { 
					$limit$
					total_development = 800 
				}
				save_event_target_as = selected_biggest_country
			}
		}
		else_if = {
			limit = { 
				$trigger_scope$ = { 
					$limit$
					total_development = 700
				}
			}
			$effect_scope$ = {
				limit = { 
					$limit$
					total_development = 700 
				}
				save_event_target_as = selected_biggest_country
			}
		}
		else_if = {
			limit = { 
				$trigger_scope$ = { 
					$limit$
					total_development = 600
				}
			}
			$effect_scope$ = {
				limit = { 
					$limit$
					total_development = 600 
				}
				save_event_target_as = selected_biggest_country
			}
		}
		else_if = {
			limit = { 
				$trigger_scope$ = { 
					$limit$
					total_development = 500
				}
			}
			$effect_scope$ = {
				limit = { 
					$limit$
					total_development = 500 
				}
				save_event_target_as = selected_biggest_country
			}
		}
		else_if = {
			limit = { 
				$trigger_scope$ = { 
					$limit$
					total_development = 400
				}
			}
			$effect_scope$ = {
				limit = { 
					$limit$
					total_development = 400 
				}
				save_event_target_as = selected_biggest_country
			}
		}
		else_if = {
			limit = { 
				$trigger_scope$ = { 
					$limit$
					total_development = 300
				}
			}
			$effect_scope$ = {
				limit = { 
					$limit$
					total_development = 300 
				}
				save_event_target_as = selected_biggest_country
			}
		}
		else_if = {
			limit = { 
				$trigger_scope$ = { 
					$limit$
					total_development = 200
				}
			}
			$effect_scope$ = {
				limit = { 
					$limit$
					total_development = 200 
				}
				save_event_target_as = selected_biggest_country
			}
		}
		else_if = {
			limit = { 
				$trigger_scope$ = { 
					$limit$
					total_development = 100
				}
			}
			$effect_scope$ = {
				limit = { 
					$limit$
					total_development = 100 
				}
				save_event_target_as = selected_biggest_country
			}
		}
		else = {
			$effect_scope$ = {
				limit = { 
					$limit$
				}
				save_event_target_as = selected_biggest_country
			}
		}
	}
}

clr_protestant_aspects_buffs = {
	if = {
		limit = { NOT = { has_church_aspect = organised_through_bishops_aspect } }
		remove_country_modifier = organised_through_bishops_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = priests_may_marry_aspect } }
		remove_country_modifier = priests_may_marry_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = adult_baptism_aspect } }
		remove_country_modifier = adult_baptism_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = holy_sacraments_aspect } }
		remove_country_modifier = holy_sacraments_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = saints_accept_prayers_aspect } }
		remove_country_modifier = saints_accept_prayers_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = icons_images_aspect } }
		remove_country_modifier = icons_images_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = legalised_divorces_aspect } }
		remove_country_modifier = legalised_divorces_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = heretics_deported_aspect } }
		remove_country_modifier = heretics_deported_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = parish_registers_aspect } }
		remove_country_modifier = parish_registers_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = individual_creeds_aspect } }
		remove_country_modifier = individual_creeds_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = allow_usury_aspect } }
		remove_country_modifier = allow_usury_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = translated_bibles_aspect } }
		remove_country_modifier = translated_bibles_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = justified_religious_war_aspect } }
		remove_country_modifier = justified_religious_war_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = war_preaches_aspect } }
		remove_country_modifier = war_preaches_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = head_of_the_church_aspect } }
		remove_country_modifier = head_of_the_church_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = anglican_aspect } }
		remove_country_modifier = anglican_aspect_aspect_modifier
	}
}

#Credits for that script goes to Stiopa
for = {
	[[custom_tooltip]custom_tooltip = $custom_tooltip$]
	hidden_effect = {
		set_variable = {
			which = ForLoopCounter
			value = $amount$
		}	
		while = {
			limit = {
				check_variable = {
					which = ForLoopCounter
					value = 1
				}
			}
			$effect$
			subtract_variable = {
				which = ForLoopCounter
				value = 1
			}
		}
    }
}

for_variable_amount = {
    set_variable = {
        which = ForLoopCounter
        which = $variable$
    }

    while = {
        limit = {
            check_variable = {
                which = ForLoopCounter
                value = 1
            }
        }
        $effect$
        subtract_variable = {
            which = ForLoopCounter
            value = 1
        }
    }
}


##########################################################
# Supports following types of units
# artillery
# cavalry
# infantry
# mercenary_infantry
# mercenary_cavalry
# heavy_ship
# light_ship
# galley
# transport
# <unit name> 
##########################################################
#Country effect
# For tooltip use the following scheme: "§Y<amount>§! of §Y<unit_type>§! will be created in §Y[<province>.GetName]§! for §Y[This.GetName]§!."
create_units_of_type = {
	[[custom_tooltip]
		custom_tooltip = $custom_tooltip$
	]
	hidden_effect = {
		for = {
			amount = $amount$
			effect = "
				$province$ = { $unit_type$ = PREV }
			"
		}
	}
}

#Province effect
# For tooltip use the following scheme: "§Y<amount>§! of §Y<unit_type>§! will be created in §Y[This.GetName]§! for §Y[<who>.GetName]§!."
create_units_of_type_in_province = {
	[[custom_tooltip]
		custom_tooltip = $custom_tooltip$
	]
	hidden_effect = {
		$who$ = {
			for = {
				amount = $amount$
				effect = "
					PREV = { $unit_type$ = $who$ }
				"
			}
		}
	}
}

#Country effect
##########################################################
# Supports following factions (aka. has tooltips for them)
# temples
# enuchs
# bureaucrats
# mr_aristocrats
# mr_traders
# mr_guilds
# rr_jacobins
# rr_royalists
# rr_girondists
# pr_buccaneers
# pr_smugglers
# pr_captains
##########################################################
faction_in_power_effect = {
	if = {
		limit = { has_faction = $faction$ }
		if = {
			limit = { faction_in_power = $faction$ }
			custom_tooltip = $faction$_are_currently_in_power_tt
			$effect$
		}
		else = {
			custom_tooltip = $faction$_in_power_tt
			tooltip = {
				$effect$
			}
		}
	}
}

## adds the culture as an accepted culture or 100 dip power
### add_accepted_culture_or_dip_power_stated = { culture = <culture> (optional) free = yes (optional) dip_reward = yes (optional) value = x (optional, works like dip_reward giving X diplomatic power instead) }
### the custom effect is only able to check for up to 10 culture slots
#Credits for that script goes to Stiopa
# In case you want a culture to be a free slot then make sure that you have the following covered:
# defined a free_slot_for_$culture$ = { num_accepted_culture = 1 }
# Supports currently the following cultures:
	# armenian
	# georgian
	# turkish
	# al_iraqiya_arabic
	# al_suryah_arabic
add_accepted_culture_or_dip_power_stated = {
	tooltip = {
		add_accepted_culture = $culture$
	}
	[[free]
		custom_tooltip = CULTURE_WILL_NOT_TAKE_SLOT_UNTIL_DEMOTED_TT
		custom_tooltip = ADD_ACCEPTED_CULTURE_TT
		hidden_effect = {
			add_country_modifier = {
				name = free_slot_for_$culture$
				duration = -1
				hidden = yes
			}
		}
	]
	[[dip_reward]
		custom_tooltip = ADD_ACCEPTED_CULTURE_SLOT_LIMITATION_TT # "If the §YCulture§! is already an §YAccepted Culture§!, or if there are not enough §YSlots§!, gain §G100§! Diplomatic Power instead."
	]
	hidden_effect = {
		if = {
			limit = {
				accepted_culture = $culture$
			}
			add_dip_power = 100
		}
		else_if = {
			limit = {
				primary_culture = $culture$
			}
			add_dip_power = 100
		}
		else_if = {
			limit = {
				num_accepted_cultures = 10
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 11
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 9
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 10
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 8
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 9
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 7
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 8
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 6
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 7
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 5
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 6
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 4
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 5
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 3
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 4
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 2
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 3
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 1
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 2
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				NOT = { num_accepted_cultures = 1 }
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 1
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else = {
			add_dip_power = 100
		}
	}
	[[new_line]
		custom_tooltip = " "
	]
}

#Use this scripted in the on_actions file, on_battle_won_country
count_won_battles_and_reward_at_end = {
	if = {
		limit = {
			ROOT = {
				has_country_flag = $counting_flag$	#Using country flags because we don't want a country to stack a variable out of control and cause performance issue because of large variables.
			}
		}
		ROOT = {
			change_variable = {
				which = num_won_battles
				value = 1
			}
		}
	}
	if = {
		limit = {
			ROOT = {
				has_country_flag = $counting_flag$
				check_variable = {
					which = num_won_battles
					value = $max_value$
				}
			}
		}
		ROOT = {
			clr_country_flag = $counting_flag$
            $effect$
		}
	}
}

#Province effect
set_center_level_3_center_of_trade = {
	custom_tooltip = set_center_level_3_center_of_trade_tt
	hidden_effect = {
	if = {
		limit = { NOT = { province_has_center_of_trade_of_level = 1 } }
		center_of_trade = 3
	}
	else = {
		if = {
			limit = { province_has_center_of_trade_of_level = 3 }
			add_base_production = 4
		}
		else_if = {
			limit = { province_has_center_of_trade_of_level = 2 }
			add_base_production = 2
			add_center_of_trade_level = 1
		}
		else = {
			add_center_of_trade_level = 2
		}
	}
}
}
set_center_level_2_center_of_trade = {
	custom_tooltip = set_center_level_2_center_of_trade_tt
	hidden_effect = {
	if = {
		limit = { NOT = { province_has_center_of_trade_of_level = 1 } }
		center_of_trade = 2
	}
	else = {
		if = {
			limit = { province_has_center_of_trade_of_level = 2 }
			add_base_production = 2
		}
		else = {
			add_center_of_trade_level = 1
		}
		}
	}
}

make_ruler_to_legendary_pirate = {
	if = {
		limit = { has_dlc = "Cradle of Civilization" }
		custom_tooltip = admirals_give_army_professionalism_tt
	}
	hidden_effect = {
		set_country_flag = admirals_give_army_professionalism
	}
}

make_ruler_to_legendary_pirate = {
	
}

add_influence_to_random_faction = {
	
}

add_influence_to_adm_faction = {
	
}

add_influence_to_dip_faction = {
	
}

add_influence_to_mil_faction = {
	
}

show_points_needed_for_livionian_government_of_category = {
	[[adm]
		if = {
			limit = { NOT = { check_variable = { which = liv_adm value = 5 } } }
			custom_tooltip = livonian_administrative_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_adm value = 4 } } }
			custom_tooltip = livonian_absolute_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_adm value = 3 } } }
			custom_tooltip = livonian_trade_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_adm value = 3 } } }
			custom_tooltip = livonian_constitutional_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_adm value = 3 } } }
			custom_tooltip = livonian_theocratic_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_adm value = 2 } } }
			custom_tooltip = livonian_enlightened_monarchy_points_needed_tt
		}
	]
	[[dip]
		if = {
			limit = { NOT = { check_variable = { which = liv_dip value = 5 } } }
			custom_tooltip = livonian_naval_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_dip value = 4 } } }
			custom_tooltip = livonian_diplomatic_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_dip value = 4 } } }
			custom_tooltip = livonian_admiral_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_dip value = 3 } } }
			custom_tooltip = livonian_trade_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_dip value = 3 } } }
			custom_tooltip = livonian_elective_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_dip value = 3 } } }
			custom_tooltip = livonian_naval_controlled_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_dip value = 2 } } }
			custom_tooltip = livonian_enlightened_monarchy_points_needed_tt
		}
	]
	[[mil]
		if = {
			limit = { NOT = { check_variable = { which = liv_mil value = 5 } } }
			custom_tooltip = livonian_military_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_mil value = 4 } } }
			custom_tooltip = livonian_general_controlled_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_mil value = 3 } } }
			custom_tooltip = livonian_theocratic_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_mil value = 3 } } }
			custom_tooltip = livonian_mercenary_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_mil value = 3 } } }
			custom_tooltip = livonian_naval_controlled_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_mil value = 2 } } }
			custom_tooltip = livonian_enlightened_monarchy_points_needed_tt
		}
	]
}

add_revolutionary_zeal_or_absolutism = {
	if = {
		limit = {
			has_dlc = "Emperor"
			is_revolutionary = yes
		}
		add_revolutionary_zeal = $amount$
	}
	else = {
		add_absolutism = $amount$
	}
}

#Cut because the Grand Crusade war doesn't really have any place in the current content, but it could be very useful for the future.
#Also modders should have the chance to just uncomment it all so they can experience the great 30 Years War like Crusade.
#enable_grand_crusade = {
#	custom_tooltip = enable_grand_crusade_tt
#	set_country_flag = can_declare_grand_crusade_wars
#	hidden_effect = {
#		save_global_event_target_as = grand_crusader_war_monger
#		set_global_flag = grand_crusades_enabled
#		set_country_flag = grand_crusader_war_monger_flag
#	}
#}
#enable_grand_crusade_tt: "Enables the §YGrand Crusade§! casus belli against all §YHeathen§! nations which have at least §Y300§! total development.\nThis casus belli enables a decision for every independent §YCatholic§! nation to join the Grand Crusade.\n\nTo join the Grand Crusade the Catholic nation must fulfil the following conditions:\nHas at least §Y100§! opinion of us or vice versa\nIs NOT allied with the §YGrand Crusade Target§! target\nHas NOT a truce with the §YGrand Crusade Target§!\nIs not at war\nDid NOT complete the §YHumanist§! idea group\n\n§RNations of the religion group of the §YGrand Crusade Target§! can join the defender's side.§!"

add_humiliation_reward = {
	if = {
		limit = { has_dlc = "Mandate of Heaven" }
		custom_tooltip = add_humiliation_reward_tt
	}
	add_power_projection = {
		type = humiliation_of_a_rival
		amount = 30
	}
	hidden_effect = {
		set_country_flag = humiliated_rival
	}
}

set_likely_rebels_flag = {
	
}

#Province scope
spawn_likely_rebels = {
	
}

ottoman_power_struggle_effect = {
	
}

ottoman_power_struggle_rebel_effect = {
	
}

#Supports the following trade goods
###################################
# grain
# wine
# wool
# cloth
# fish
# fur
# salt
# naval_supplies
# copper
# gold
# iron
# slaves
# ivory
# tea
# chinaware
# spices
# coffee
# cotton
# sugar
# tobacco
# cocoa
# silk
# dyes
# tropical_wood
# livestock
# incense
# glass
# paper
# gems
# coal
# cloves
increase_trade_goods_discovery = {
	custom_tooltip = increase_trade_goods_discovery_$trade_goods$_tt
	set_country_flag = increased_trade_goods_discovery_$trade_goods$
}

increase_gold_discovery = {
	custom_tooltip = por_bandeirantes_tooltip
	set_country_flag = por_bandeirantes_flag
}

remove_dev_from_building = {
	if = {
		limit = {
			FROM = { full_idea_group = economic_ideas }
			gained_dev_from_eco_building = { building = $building$ }
		}
		add_base_$type$ = -$value$
		if = {
			limit = {
				NOT = { base_$type$ = 1 }
			}
			set_base_$type$ = 1
		}
		hidden_effect = {
			clr_province_flag = built_eco_dev_$building$
		}
	}
}

add_dev_from_building = {
	if = {
		limit = {
			FROM = { full_idea_group = economic_ideas }
			NOT = { gained_dev_from_eco_building = { building = $building$ } }
		}
		add_base_$type$ = $value$
		hidden_effect = {
			set_province_flag = built_eco_dev_$building$
		}
	}
}

#type = army/navy
#leader = general/conquistador/admiral/explorer
create_leader_scaling_with_tradition = {
	if = {
		limit = {
			$type$_tradition = 80
		}
		create_$leader$ = {
			tradition = 100
		}
	}
	else_if = {
		limit = {
			$type$_tradition = 70
		}
		create_$leader$ = {
			tradition = 90
		}
	}
	else_if = {
		limit = {
			$type$_tradition = 60
		}
		create_$leader$ = {
			tradition = 80
		}
	}
	else_if = {
		limit = {
			$type$_tradition = 50
		}
		create_$leader$ = {
			tradition = 70
		}
	}
	else_if = {
		limit = {
			$type$_tradition = 40
		}
		create_$leader$ = {
			tradition = 60
		}
	}
	else_if = {
		limit = {
			$type$_tradition = 30
		}
		create_$leader$ = {
			tradition = 50
		}
	}
	else = {
		create_$leader$ = {
			tradition = 40
		}
	}
	custom_tooltip = create_leader_scaling_with_tradition_tt
}

#A Specific case of the above
create_general_scaling_with_tradition_and_pips = {
	if = {
		limit = {
			army_tradition = 80
		}
		create_general_with_pips = {
			tradition = 100
			[[add_fire] add_fire = $add_fire$ ]
			[[add_shock] add_shock = $add_shock$ ]
			[[add_manuever] add_manuever = $add_manuever$ ]
			[[add_siege] add_siege = $add_siege$ ]
		}
	}
	else_if = {
		limit = {
			army_tradition = 70
		}
		create_general_with_pips = {
			tradition = 90
			[[add_fire] add_fire = $add_fire$ ]
			[[add_shock] add_shock = $add_shock$ ]
			[[add_manuever] add_manuever = $add_manuever$ ]
			[[add_siege] add_siege = $add_siege$ ]
		}
	}
	else_if = {
		limit = {
			army_tradition = 60
		}
		create_general_with_pips = {
			tradition = 80
			[[add_fire] add_fire = $add_fire$ ]
			[[add_shock] add_shock = $add_shock$ ]
			[[add_manuever] add_manuever = $add_manuever$ ]
			[[add_siege] add_siege = $add_siege$ ]
		}
	}
	else_if = {
		limit = {
			army_tradition = 50
		}
		create_general_with_pips = {
			tradition = 70
			[[add_fire] add_fire = $add_fire$ ]
			[[add_shock] add_shock = $add_shock$ ]
			[[add_manuever] add_manuever = $add_manuever$ ]
			[[add_siege] add_siege = $add_siege$ ]
		}
	}
	else_if = {
		limit = {
			army_tradition = 40
		}
		create_general_with_pips = {
			tradition = 60
			[[add_fire] add_fire = $add_fire$ ]
			[[add_shock] add_shock = $add_shock$ ]
			[[add_manuever] add_manuever = $add_manuever$ ]
			[[add_siege] add_siege = $add_siege$ ]
		}
	}
	else_if = {
		limit = {
			army_tradition = 30
		}
		create_general_with_pips = {
			tradition = 50
			[[add_fire] add_fire = $add_fire$ ]
			[[add_shock] add_shock = $add_shock$ ]
			[[add_manuever] add_manuever = $add_manuever$ ]
			[[add_siege] add_siege = $add_siege$ ]
		}
	}
	else = {
		create_general_with_pips = {
			tradition = 40
			[[add_fire] add_fire = $add_fire$ ]
			[[add_shock] add_shock = $add_shock$ ]
			[[add_manuever] add_manuever = $add_manuever$ ]
			[[add_siege] add_siege = $add_siege$ ]
		}
	}
	custom_tooltip = create_leader_scaling_with_tradition_tt
}

#type = heavy_ship/light_ship/galley/transport
add_ship_construction_scaled_to_ports = {	
	random_owned_province = {
		limit = {
			has_port = yes
		}
		if = {
			limit = {
				owner = {
					num_of_ports = 10
				}
			}
			add_unit_construction = {
				amount = 5
				type = $type$
				speed = 0.5
				cost = 0
			}
		}
		else_if = {
			limit = {
				owner = {
					num_of_ports = 8
				}
			}
			add_unit_construction = {
				amount = 4
				type = $type$
				speed = 0.5
				cost = 0
			}
		}
		else_if = {
			limit = {
				owner = {
					num_of_ports = 6
				}
			}
			add_unit_construction = {
				amount = 3
				type = $type$
				speed = 0.5
				cost = 0
			}
		}
		else_if = {
			limit = {
				owner = {
					num_of_ports = 4
				}
			}
			add_unit_construction = {
				amount = 2
				type = $type$
				speed = 0.5
				cost = 0
			}
		}
		else = {
		add_unit_construction = {
			amount = 1
			type = $type$
			speed = 0.5
			cost = 0
		}
	}
	}
}
add_ship_construction_scaled_to_ports_MAY = {	
	
}
add_ship_construction_scaled_to_ports_MAY = {	
	
}

update_entire_culture = {
	change_primary_culture = $culture$_new
	set_ruler_culture = $culture$_new
	if = {
		limit = {
			has_heir = yes
		}
		set_heir_culture = $culture$_new
	}
	if = {
		limit = {
			has_consort = yes
			consort_culture = $culture$
		}
		set_consort_culture = $culture$_new
	}
	hidden_effect = {
		every_province = {
			limit = {
				culture = $culture$
			}
			change_culture = $culture$_new
		}
		every_country = {
			limit = {
				primary_culture = $culture$
			}
			change_primary_culture = $culture$_new
			set_ruler_culture = $culture$_new
			if = {
				limit = {
					has_heir = yes
				}
				set_heir_culture = $culture$_new
			}
			if = {
				limit = {
					has_consort = yes
					consort_culture = $culture$
				}
				set_consort_culture = $culture$_new
			}
		}
		set_global_flag = updated_$culture$_flag
		[[clear_previous_accepted_culture]
			remove_accepted_culture = $culture$
		]
	}
}

update_entire_culture_foreign = {
	hidden_effect = {
		every_province = {
			limit = {
				culture = $culture$
			}
			change_culture = $culture$_new
		}
		every_country = {
			limit = {
				primary_culture = $culture$
			}
			change_primary_culture = $culture$_new
			set_ruler_culture = $culture$_new
			if = {
				limit = {
					has_heir = yes
				}
				set_heir_culture = $culture$_new
			}
			if = {
				limit = {
					has_consort = yes
					consort_culture = $culture$
				}
				set_consort_culture = $culture$_new
			}
			[[clear_previous_accepted_culture]
				remove_accepted_culture = $culture$
			]
		}
		set_global_flag = updated_$culture$_flag
	}
}

update_entire_culture_group = {
	change_primary_culture = $culture$_new
	set_ruler_culture = $culture$_new
	if = {
		limit = {
			has_heir = yes
		}
		set_heir_culture = $culture$_new
	}
	if = {
		limit = {
			has_consort = yes
			OR = {
				consort_culture = $culture1$
				[[culture2]consort_culture = $culture2$]
				[[culture3]consort_culture = $culture3$]
				[[culture4]consort_culture = $culture4$]
				[[culture5]consort_culture = $culture5$]
				[[culture6]consort_culture = $culture6$]
				[[culture7]consort_culture = $culture7$]
				[[culture8]consort_culture = $culture8$]
				[[culture9]consort_culture = $culture9$]
				[[culture10]consort_culture = $culture10$]
				[[culture11]consort_culture = $culture11$]
				[[culture11]consort_culture = $culture11$]
				[[culture12]consort_culture = $culture12$]
				[[culture13]consort_culture = $culture13$]
				[[culture14]consort_culture = $culture14$]
				[[culture15]consort_culture = $culture15$]
				[[culture16]consort_culture = $culture16$]
				[[culture17]consort_culture = $culture17$]
				[[culture18]consort_culture = $culture18$]
				[[culture19]consort_culture = $culture19$]
				[[culture20]consort_culture = $culture20$]
			}
			consort_culture = $culture$
		}
		set_consort_culture = $culture$_new
	}
	hidden_effect = {
		every_province = {
			limit = {
				OR = {
					culture = $culture1$
					[[culture2]culture = $culture2$]
					[[culture3]culture = $culture3$]
					[[culture4]culture = $culture4$]
					[[culture5]culture = $culture5$]
					[[culture6]culture = $culture6$]
					[[culture7]culture = $culture7$]
					[[culture8]culture = $culture8$]
					[[culture9]culture = $culture9$]
					[[culture10]culture = $culture10$]
					[[culture11]culture = $culture11$]
					[[culture11]culture = $culture11$]
					[[culture12]culture = $culture12$]
					[[culture13]culture = $culture13$]
					[[culture14]culture = $culture14$]
					[[culture15]culture = $culture15$]
					[[culture16]culture = $culture16$]
					[[culture17]culture = $culture17$]
					[[culture18]culture = $culture18$]
					[[culture19]culture = $culture19$]
					[[culture20]culture = $culture20$]
				}
			}
			change_culture = $culture$_new
		}
		every_country = {
			limit = {
				OR = {
					primary_culture = $culture1$
					[[culture2]primary_culture = $culture2$]
					[[culture3]primary_culture = $culture3$]
					[[culture4]primary_culture = $culture4$]
					[[culture5]primary_culture = $culture5$]
					[[culture6]primary_culture = $culture6$]
					[[culture7]primary_culture = $culture7$]
					[[culture8]primary_culture = $culture8$]
					[[culture9]primary_culture = $culture9$]
					[[culture10]primary_culture = $culture10$]
					[[culture11]primary_culture = $culture11$]
					[[culture11]primary_culture = $culture11$]
					[[culture12]primary_culture = $culture12$]
					[[culture13]primary_culture = $culture13$]
					[[culture14]primary_culture = $culture14$]
					[[culture15]primary_culture = $culture15$]
					[[culture16]primary_culture = $culture16$]
					[[culture17]primary_culture = $culture17$]
					[[culture18]primary_culture = $culture18$]
					[[culture19]primary_culture = $culture19$]
					[[culture20]primary_culture = $culture20$]
				}
			}
			change_primary_culture = $culture$_new
			set_ruler_culture = $culture$_new
			if = {
				limit = {
					has_heir = yes
				}
				set_heir_culture = $culture$_new
			}
			if = {
				limit = {
					has_consort = yes
					OR = {
						consort_culture = $culture1$
						[[culture2]consort_culture = $culture2$]
						[[culture3]consort_culture = $culture3$]
						[[culture4]consort_culture = $culture4$]
						[[culture5]consort_culture = $culture5$]
						[[culture6]consort_culture = $culture6$]
						[[culture7]consort_culture = $culture7$]
						[[culture8]consort_culture = $culture8$]
						[[culture9]consort_culture = $culture9$]
						[[culture10]consort_culture = $culture10$]
						[[culture11]consort_culture = $culture11$]
						[[culture11]consort_culture = $culture11$]
						[[culture12]consort_culture = $culture12$]
						[[culture13]consort_culture = $culture13$]
						[[culture14]consort_culture = $culture14$]
						[[culture15]consort_culture = $culture15$]
						[[culture16]consort_culture = $culture16$]
						[[culture17]consort_culture = $culture17$]
						[[culture18]consort_culture = $culture18$]
						[[culture19]consort_culture = $culture19$]
						[[culture20]consort_culture = $culture20$]
					}
				}
				set_consort_culture = $culture$_new
			}
			[[clear_previous_accepted_culture]
				remove_accepted_culture = $culture$
			]
		}
		set_global_flag = updated_$culture$_flag
	}
}

create_new_culture_group = {
	change_primary_culture = $culture$_new
	set_ruler_culture = $culture$_new
	if = {
		limit = {
			has_heir = yes
		}
		set_heir_culture = $culture$_new
	}
	if = {
		limit = {
			has_consort = yes
			OR = {
				consort_culture = $culture$
				[[culture2]consort_culture = $culture2$]
				[[culture3]consort_culture = $culture3$]
				[[culture4]consort_culture = $culture4$]
				[[culture5]consort_culture = $culture5$]
				[[culture6]consort_culture = $culture6$]
				[[culture7]consort_culture = $culture7$]
				[[culture8]consort_culture = $culture8$]
				[[culture9]consort_culture = $culture9$]
				[[culture10]consort_culture = $culture10$]
				[[culture11]consort_culture = $culture11$]
				[[culture11]consort_culture = $culture11$]
				[[culture12]consort_culture = $culture12$]
				[[culture13]consort_culture = $culture13$]
				[[culture14]consort_culture = $culture14$]
				[[culture15]consort_culture = $culture15$]
				[[culture16]consort_culture = $culture16$]
				[[culture17]consort_culture = $culture17$]
				[[culture18]consort_culture = $culture18$]
				[[culture19]consort_culture = $culture19$]
				[[culture20]consort_culture = $culture20$]
			}
			consort_culture = $culture$
		}
		set_consort_culture = $culture$_new
	}
	hidden_effect = {
		every_province = {
			limit = {
				OR = {
					culture = $culture$
					[[culture2]culture = $culture2$]
					[[culture3]culture = $culture3$]
					[[culture4]culture = $culture4$]
					[[culture5]culture = $culture5$]
					[[culture6]culture = $culture6$]
					[[culture7]culture = $culture7$]
					[[culture8]culture = $culture8$]
					[[culture9]culture = $culture9$]
					[[culture10]culture = $culture10$]
					[[culture11]culture = $culture11$]
					[[culture11]culture = $culture11$]
					[[culture12]culture = $culture12$]
					[[culture13]culture = $culture13$]
					[[culture14]culture = $culture14$]
					[[culture15]culture = $culture15$]
					[[culture16]culture = $culture16$]
					[[culture17]culture = $culture17$]
					[[culture18]culture = $culture18$]
					[[culture19]culture = $culture19$]
					[[culture20]culture = $culture20$]
				}
			}
			trigger_switch = {
				on_trigger = culture
				$culture$ = { change_culture = $culture$_new }
				[[culture2]$culture2$ = { change_culture = $culture2$_new }]
				[[culture3]$culture3$ = { change_culture = $culture3$_new }]
				[[culture4]$culture4$ = { change_culture = $culture4$_new }]
				[[culture5]$culture5$ = { change_culture = $culture5$_new }]
				[[culture6]$culture6$ = { change_culture = $culture6$_new }]
				[[culture7]$culture7$ = { change_culture = $culture7$_new }]
				[[culture8]$culture8$ = { change_culture = $culture8$_new }]
				[[culture9]$culture9$ = { change_culture = $culture9$_new }]
				[[culture10]$culture10$ = { change_culture = $culture10$_new }]
				[[culture11]$culture11$ = { change_culture = $culture11$_new }]
				[[culture11]$culture11$ = { change_culture = $culture11$_new }]
				[[culture12]$culture12$ = { change_culture = $culture12$_new }]
				[[culture13]$culture13$ = { change_culture = $culture13$_new }]
				[[culture14]$culture14$ = { change_culture = $culture14$_new }]
				[[culture15]$culture15$ = { change_culture = $culture15$_new }]
				[[culture16]$culture16$ = { change_culture = $culture16$_new }]
				[[culture17]$culture17$ = { change_culture = $culture17$_new }]
				[[culture18]$culture18$ = { change_culture = $culture18$_new }]
				[[culture19]$culture19$ = { change_culture = $culture19$_new }]
				[[culture20]$culture20$ = { change_culture = $culture20$_new }]
			}
		}
		every_country = {
			limit = {
				OR = {
					primary_culture = $culture$
					[[culture2]primary_culture = $culture2$]
					[[culture3]primary_culture = $culture3$]
					[[culture4]primary_culture = $culture4$]
					[[culture5]primary_culture = $culture5$]
					[[culture6]primary_culture = $culture6$]
					[[culture7]primary_culture = $culture7$]
					[[culture8]primary_culture = $culture8$]
					[[culture9]primary_culture = $culture9$]
					[[culture10]primary_culture = $culture10$]
					[[culture11]primary_culture = $culture11$]
					[[culture11]primary_culture = $culture11$]
					[[culture12]primary_culture = $culture12$]
					[[culture13]primary_culture = $culture13$]
					[[culture14]primary_culture = $culture14$]
					[[culture15]primary_culture = $culture15$]
					[[culture16]primary_culture = $culture16$]
					[[culture17]primary_culture = $culture17$]
					[[culture18]primary_culture = $culture18$]
					[[culture19]primary_culture = $culture19$]
					[[culture20]primary_culture = $culture20$]
				}
			}
			trigger_switch = {
				on_trigger = primary_culture
				$culture$ = {
					change_primary_culture = $culture$_new
					set_ruler_culture = $culture$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture$_new }
					if = { limit = { has_consort = yes } set_consort_culture = $culture$_new }
				}
				[[culture2]$culture2$ = {
					change_primary_culture = $culture2$_new
					set_ruler_culture = $culture2$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture2$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture2$_new }
				}]
				[[culture3]$culture3$ = {
					change_primary_culture = $culture3$_new
					set_ruler_culture = $culture3$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture3$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture3$_new }
				}]
				[[culture4]$culture4$ = {
					change_primary_culture = $culture4$_new
					set_ruler_culture = $culture4$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture4$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture4$_new }
				}]
				[[culture5]$culture5$ = {
					change_primary_culture = $culture5$_new
					set_ruler_culture = $culture5$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture5$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture5$_new }
				}]
				[[culture6]$culture6$ = {
					change_primary_culture = $culture6$_new
					set_ruler_culture = $culture6$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture6$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture6$_new }
				}]
				[[culture7]$culture7$ = {
					change_primary_culture = $culture7$_new
					set_ruler_culture = $culture7$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture7$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture7$_new }
				}]
				[[culture8]$culture8$ = {
					change_primary_culture = $culture8$_new
					set_ruler_culture = $culture8$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture8$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture8$_new }
				}]
				[[culture9]$culture9$ = {
					change_primary_culture = $culture9$_new
					set_ruler_culture = $culture9$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture9$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture9$_new }
				}]
				[[culture10]$culture10$ = {
					change_primary_culture = $culture10$_new
					set_ruler_culture = $culture10$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture10$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture10$_new }
				}]
				[[culture11]$culture11$ = {
					change_primary_culture = $culture11$_new
					set_ruler_culture = $culture11$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture11$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture11$_new }
				}]
				[[culture11]$culture11$ = {
					change_primary_culture = $culture11$_new
					set_ruler_culture = $culture11$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture11$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture11$_new }
				}]
				[[culture12]$culture12$ = {
					change_primary_culture = $culture12$_new
					set_ruler_culture = $culture12$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture12$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture12$_new }
				}]
				[[culture13]$culture13$ = {
					change_primary_culture = $culture13$_new
					set_ruler_culture = $culture13$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture13$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture13$_new }
				}]
				[[culture14]$culture14$ = {
					change_primary_culture = $culture14$_new
					set_ruler_culture = $culture14$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture14$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture14$_new }
				}]
				[[culture15]$culture15$ = {
					change_primary_culture = $culture15$_new
					set_ruler_culture = $culture15$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture15$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture15$_new }
				}]
				[[culture16]$culture16$ = {
					change_primary_culture = $culture16$_new
					set_ruler_culture = $culture16$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture16$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture16$_new }
				}]
				[[culture17]$culture17$ = {
					change_primary_culture = $culture17$_new
					set_ruler_culture = $culture17$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture17$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture17$_new }
				}]
				[[culture18]$culture18$ = {
					change_primary_culture = $culture18$_new
					set_ruler_culture = $culture18$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture18$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture18$_new }
				}]
				[[culture19]$culture19$ = {
					change_primary_culture = $culture19$_new
					set_ruler_culture = $culture19$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture19$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture19$_new }
				}]
				[[culture20]$culture20$ = {
					change_primary_culture = $culture20$_new
					set_ruler_culture = $culture20$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture20$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture20$_new }
				}]
			}
		}
		set_global_flag = updated_$culture_group$_flag
	}
}
#Supports the following trade goods		Base prices
# grain									2.5
# wine									2.5
# wool									2.5
# cloth									3
# fish									2.5
# fur									2
# salt									3
# naval_supplies						2
# copper								3
# gold									10	#Technically 0, but let us calculate with 10
# iron									3
# slaves								2
# ivory									4
# tea									3
# chinaware								3
# spices								3
# coffee								3
# cotton								3
# sugar									3
# tobacco								3
# cocoa									4
# silk									4
# dyes									4
# tropical_wood							2
# livestock								2
# incense								2.5
# glass									3
# paper									3.5
# gems									4
# coal									10
# cloves								8
# unknown								0	#Special and should not count

determine_value_of_trade_goods_grain = {
	set_variable = {
		which = base_value_grain
		value = 2.5
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_grain
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = mountain
						has_terrain = coastal_desert
						has_terrain = forest
						has_terrain = woods
						has_terrain = hills
						has_terrain = jungle
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_grain
				value = 0.15
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = highlands
						has_terrain = marsh
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_grain
				value = 0.25
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_climate = arid
						has_climate = tropical
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_grain
				value = 0.25
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = drylands
						has_terrain = savannah
						has_terrain = steppe
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_grain
				value = 0.6
			}
		}
		if = {
			limit = {
				ROOT = {
					has_winter = severe_winter
				}
			}
			multiply_variable = {
				which = chance_modifier_grain
				value = 0.35
			}
		}
		if = {
			limit = {
				ROOT = {
					has_winter = normal_winter
				}
			}
			multiply_variable = {
				which = chance_modifier_grain
				value = 0.5
			}
		}
		if = {
			limit = {
				ROOT = {
					has_terrain = farmlands
				}
			}
			multiply_variable = {
				which = chance_modifier_grain
				value = 1.5
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						region = poland_region
						region = ruthenia_region
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_grain
				value = 1.5
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = grain }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = grain } }
				}
			}
			multiply_variable = {
				which = chance_modifier_grain
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_grain
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_grain
				which = chance_modifier_grain
			}
		}
	}
}
determine_value_of_trade_goods_wine = {
	set_variable = {
		which = base_value_wine
		value = 2.5
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_wine
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					has_winter = normal_winter
				}
			}
			multiply_variable = {
				which = chance_modifier_wine
				value = 0.25
			}
		}
		if = {
			limit = {
				ROOT = {
					has_terrain = farmlands
				}
			}
			multiply_variable = {
				which = chance_modifier_wine
				value = 1.25
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = hills
						has_terrain = highlands
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_wine
				value = 1.25
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = wine }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = wine } }
				}
			}
			multiply_variable = {
				which = chance_modifier_wine
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_wine
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_wine
				which = chance_modifier_wine
			}
		}
	}
}
determine_value_of_trade_goods_wool = {
	set_variable = {
		which = base_value_wool
		value = 2.5
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_wool
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = grasslands
						has_terrain = hills
						has_terrain = forest
						has_terrain = woods
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_wool
				value = 0.15
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = desert
						has_terrain = savannah
						has_terrain = highlands
						has_terrain = drylands
						has_climate = arid
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_wool
				value = 1.25
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = wool }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = wool } }
				}
			}
			multiply_variable = {
				which = chance_modifier_wool
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_wool
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_wool
				which = chance_modifier_wool
			}
		}
	}
}
determine_value_of_trade_goods_cloth = {
	set_variable = {
		which = base_value_cloth
		value = 3
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_cloth
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					development_discounting_tribal = 12
				}
			}
			multiply_variable = {
				which = chance_modifier_cloth
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = cloth }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = cloth } }
				}
			}
			multiply_variable = {
				which = chance_modifier_cloth
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_cloth
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_cloth
				which = chance_modifier_cloth
			}
		}
	}
}
determine_value_of_trade_goods_fish = {
	set_variable = {
		which = base_value_fish
		value = 2.5
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_fish
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = coastline
						has_terrain = coastal_desert
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_fish
				value = 1.1
			}
		}
		if = {
			limit = {
				ROOT = {
					has_terrain = glacier
				}
			}
			multiply_variable = {
				which = chance_modifier_fish
				value = 1.2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = fish }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = fish } }
				}
			}
			multiply_variable = {
				which = chance_modifier_fish
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_fish
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_fish
				which = chance_modifier_fish
			}
		}
	}
}
determine_value_of_trade_goods_fur = {
	set_variable = {
		which = base_value_fur
		value = 2
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_fur
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = savannah
						has_terrain = grasslands
						has_terrain = highlands
					}
					has_winter = mild_winter
				}
			}
			multiply_variable = {
				which = chance_modifier_fur
				value = 0.75
			}
		}
		if = {
			limit = {
				ROOT = {
					NOT = { native_size = 1 }
				}
			}
			multiply_variable = {
				which = chance_modifier_fur
				value = 0.5
			}
		}
		if = {
			limit = {
				ROOT = {
					native_size = 1
				}
			}
			multiply_variable = {
				which = chance_modifier_fur
				value = 2
			}
		}
		if = {
			limit = {
				ROOT = {
					has_terrain = forest
				}
			}
			multiply_variable = {
				which = chance_modifier_fur
				value = 1.5
			}
		}
		if = {
			limit = {
				ROOT = {
					has_winter = normal_winter
				}
			}
			multiply_variable = {
				which = chance_modifier_fur
				value = 1.6
			}
		}
		if = {
			limit = {
				ROOT = {
					has_winter = severe_winter
					NOT = { has_terrain = glacier }
				}
			}
			multiply_variable = {
				which = chance_modifier_fur
				value = 2.5
			}
		}
		if = {
			limit = {
				has_country_flag = encourage_cash_crops_flag
			}
			multiply_variable = {
				which = chance_modifier_fur
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = fur }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = fur } }
				}
			}
			multiply_variable = {
				which = chance_modifier_fur
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_fur
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_fur
				which = chance_modifier_fur
			}
		}
	}
}
determine_value_of_trade_goods_salt = {
	set_variable = {
		which = base_value_salt
		value = 3
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_salt
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = desert
						AND = {
							has_terrain = marsh
							NOT = { has_climate = arctic } #Hudson Bay
						}
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_salt
				value = 2
			}
		}
		if = {
			limit = {
				ROOT = {
					region = peru_region
				}
			}
			multiply_variable = {
				which = chance_modifier_salt
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = salt }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = salt } }
				}
			}
			multiply_variable = {
				which = chance_modifier_salt
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_salt
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_salt
				which = chance_modifier_salt
			}
		}
	}
}
determine_value_of_trade_goods_naval_supplies = {
	set_variable = {
		which = base_value_naval_supplies
		value = 2
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_naval_supplies
			value = 1
		}
		if = {
			limit = {
				NOT = { num_of_ports = 1 }
			}
			multiply_variable = {
				which = chance_modifier_naval_supplies
				value = 0.5
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = coastline
						has_climate = tropical
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_naval_supplies
				value = 0.75
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = forest
						has_terrain = woods
						has_terrain = hills
						has_terrain = jungle
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_naval_supplies
				value = 1.5
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = naval_supplies }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = naval_supplies } }
				}
			}
			multiply_variable = {
				which = chance_modifier_naval_supplies
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_naval_supplies
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_naval_supplies
				which = chance_modifier_naval_supplies
			}
		}
	}
}
determine_value_of_trade_goods_copper = {
	set_variable = {
		which = base_value_copper
		value = 3
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_copper
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					is_random_new_world = yes
					OR = {
						has_terrain = mountain
						has_terrain = highlands
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_copper
				value = 1.1
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = copper }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = copper } }
				}
			}
			multiply_variable = {
				which = chance_modifier_copper
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_copper
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_copper
				which = chance_modifier_copper
			}
		}
	}
}
determine_value_of_trade_goods_gold = {
	set_variable = {
		which = base_value_gold
		value = 10
	}
	if = {
		limit = {
			#has_chance_scaling_cost = yes
			always = no
		}
		set_variable = {
			which = chance_modifier_gold
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					is_random_new_world = yes
					has_terrain = mountain
					continent = new_world #Always in RNW
				}
			}
			multiply_variable = {
				which = chance_modifier_gold
				value = 1.5
			}
		}
		if = {
			limit = {
				ROOT = {
					normal_or_historical_nations = no
				}
			}
			multiply_variable = {
				which = chance_modifier_gold
				value = 1.5
			}
		}
		if = {
			limit = {
				OR = {
					has_country_flag = por_bandeirantes_flag
					colonial_parent = { has_country_flag = por_bandeirantes_flag }
				}
			}
			multiply_variable = {
				which = chance_modifier_gold
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = gold }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = gold } }
				}
			}
			multiply_variable = {
				which = chance_modifier_gold
				value = 2
			}
		}
		if = {
			limit = {
				ROOT = {
					province_id = 856
				}
			}
			multiply_variable = {
				which = chance_modifier_gold
				value = 100
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_gold
						value = 0
					}
				}

# distribute_development = {
#	type = x //The 3 development types. E.G. type = production
#	amount = x //How many development to add. E.G amount = 10
#	limit = " " OPTIONAL //takes actual triggers. E.G. limit = " NOT = { culture = ROOT } "
#}
distribute_development = {
	hidden_effect = {
	set_variable = {
			which = $type$_loop
						value = 0
					}
		while = {
			limit = {
				NOT = {
					check_variable = {
						which = $type$_loop
						value = $amount$
			}
		}
	}
			random_owned_province = {
				[[limit]
		limit = {
						$limit$
					} 
				]
				add_base_$type$ = 1
			}
			change_variable = {
				which = $type$_loop
			value = 1
		}
		}
	}
	custom_tooltip = $type$_$amount$
	custom_tooltip = " "
	[[tooltip]
		custom_tooltip = $tooltip$
		custom_tooltip = " "
	]
}

# This file contains all effects which are are needed for dynamic effects, but have more than 512 characters in total.
# It also has the dynamic effect itself too.
#Use insight_tooltip = INSIGHT_JUST_TOOLTIP if you don't want to have anything specific
country_event_with_insight = {
	country_event = {
		id = $id$
		[[days] days = $days$]
		[[random] random = $random$]
		[[tooltip] tooltip = $tooltip$]
	}
	custom_tooltip = EVENT_INSIGHT_INTRO
	custom_tooltip = $insight_tooltip$
	[[effect_tooltip] tooltip = { $effect_tooltip$ }]
}

# "Simple" as in "Do not put too many characters in the input argument or else it will not work"
# This serves as both an useful effect for small dynamic mission rewards
# And as a reminder how the template for the dynamic mission rewards should look like

# Use this if you want the rewards / triggers to be exclusive
# This means if a AND b are fulfilled then the player gets only reward from a
# IMPORTANT: They do NOT fire events for some reason.
simple_dynamic_effect = {
	custom_tooltip = $first_custom_tooltip$
		if = {
			limit = {
			$first_limit$
			}
		custom_tooltip = BONUS_REWARD_YES
			}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$first_effect$
		}
	custom_tooltip = mission_alternatively_tt
	[[second_custom_tooltip] custom_tooltip = $second_custom_tooltip$ ]
		if = {
			limit = {
			$second_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$second_effect$
	}
	hidden_effect = {
		if = {
			limit = { $first_limit$ }
			$first_effect$
		}
		else = {
			$second_effect$
		}
	}
}

# Use this if you want the rewards / triggers to be additive
# This means if a AND b are fulfilled then the player gets both
simple_dynamic_effect_without_alternative = {
	custom_tooltip = $first_custom_tooltip$
		if = {
			limit = {
			$first_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$first_effect$
	}
	[[second_custom_tooltip] custom_tooltip = $second_custom_tooltip$ ]
		if = {
			limit = {
			$second_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$second_effect$
	}
	hidden_effect = {
		if = {
			limit = { $first_limit$ }
			$first_effect$
		}
		if = {
			limit = { $second_limit$ }
			$second_effect$
		}
	}
}

# "Complex" as in "if you need this effect then you should rethink your mission reward"
# Supports up to 10 dynamic effects
# Will probably result in a grocery list when you hover over the effects though
complex_dynamic_effect = {
	custom_tooltip = $first_custom_tooltip$
		if = {
			limit = {
			$first_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$first_effect$
	}

	[[second_custom_tooltip] 
	custom_tooltip = mission_alternatively_tt
	custom_tooltip = $second_custom_tooltip$
		if = {
			limit = {
			$second_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$second_effect$
	}
	]

	[[third_custom_tooltip] 
	custom_tooltip = mission_alternatively_tt
	custom_tooltip = $third_custom_tooltip$
	if = {
		limit = {
			$third_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$third_effect$
	}
	]

	[[fourth_custom_tooltip] 
	custom_tooltip = mission_alternatively_tt
	custom_tooltip = $fourth_custom_tooltip$
		if = {
			limit = {
			$fourth_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$fourth_effect$
	}
	]

	[[fifth_custom_tooltip] 
	custom_tooltip = mission_alternatively_tt
	custom_tooltip = $fifth_custom_tooltip$
		if = {
			limit = {
			$fifth_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$fifth_effect$
	}
	]

	[[sixth_custom_tooltip] 
	custom_tooltip = mission_alternatively_tt
	custom_tooltip = $sixth_custom_tooltip$
	if = {
		limit = {
			$sixth_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$sixth_effect$
	}
	]

	[[seventh_custom_tooltip] 
	custom_tooltip = mission_alternatively_tt
	custom_tooltip = $seventh_custom_tooltip$
		if = {
			limit = {
			$seventh_limit$
			}
		custom_tooltip = BONUS_REWARD_YES
			}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$seventh_effect$
		}
	]

	[[eighth_custom_tooltip] 
	custom_tooltip = mission_alternatively_tt
	custom_tooltip = $eighth_custom_tooltip$
		if = {
			limit = {
			$eighth_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$eighth_effect$
	}
	]

	[[nineth_custom_tooltip] 
	custom_tooltip = mission_alternatively_tt
	custom_tooltip = $nineth_custom_tooltip$
		if = {
			limit = {
			$nineth_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$nineth_effect$
	}
	]

	[[tenth_custom_tooltip] 
	custom_tooltip = mission_alternatively_tt
	custom_tooltip = $tenth_custom_tooltip$
	if = {
		limit = {
			$tenth_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$tenth_effect$
	}
	]

	hidden_effect = {
		if = {
			limit = { $first_limit$ }
			$first_effect$
		}
		[[second_custom_tooltip] 
		else_if = {
			limit = { $second_limit$ }
			$second_effect$
		}
		]
		[[third_custom_tooltip] 
		else_if = {
			limit = { $third_limit$ }
			$third_effect$
		}
		]
		[[fourth_custom_tooltip] 
		else_if = {
			limit = { $fourth_limit$ }
			$fourth_effect$
		}
		]
		[[fifth_custom_tooltip] 
		else_if = {
			limit = { $fifth_limit$ }
			$fifth_effect$
		}
		]
		[[sixth_custom_tooltip] 
		else_if = {
			limit = { $sixth_limit$ }
			$sixth_effect$
		}
		]
		[[seventh_custom_tooltip] 
		else_if = {
			limit = { $seventh_limit$ }
			$seventh_effect$
		}
		]
		[[eigth_custom_tooltip] 
		else_if = {
			limit = { $eigth_limit$ }
			$eigth_effect$
		}
		]
		[[nineth_custom_tooltip] 
		else_if = {
			limit = { $nineth_limit$ }
			$nineth_effect$
		}
		]
		[[tenth_custom_tooltip] 
		else_if = {
			limit = { $tenth_limit$ }
			$tenth_effect$
		}
		]
	}
}

# Use this if you want the rewards / triggers to be additive
# This means if a AND b are fulfilled then the player gets both
complex_dynamic_effect_without_alternative = {
	custom_tooltip = $first_custom_tooltip$
	if = {
		limit = {
			$first_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$first_effect$
	}

	[[second_custom_tooltip] 
	custom_tooltip = $second_custom_tooltip$
		if = {
			limit = {
			$second_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$second_effect$
	}
	]

	[[third_custom_tooltip] 
	custom_tooltip = $third_custom_tooltip$
		if = {
			limit = {
			$third_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$third_effect$
	}
	]

	[[fourth_custom_tooltip] 
	custom_tooltip = $fourth_custom_tooltip$
	if = {
		limit = {
			$fourth_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$fourth_effect$
	}
	]

	[[fifth_custom_tooltip] 
	custom_tooltip = $fifth_custom_tooltip$
		if = {
			limit = {
			$fifth_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$fifth_effect$
	}
	]

	[[sixth_custom_tooltip] 
	custom_tooltip = $sixth_custom_tooltip$
	if = {
		limit = {
			$sixth_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$sixth_effect$
	}
	]

	[[seventh_custom_tooltip] 
	custom_tooltip = $seventh_custom_tooltip$
		if = {
			limit = {
			$seventh_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$seventh_effect$
	}
	]

	[[eighth_custom_tooltip] 
	custom_tooltip = $eighth_custom_tooltip$
		if = {
			limit = {
			$eighth_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$eighth_effect$
	}
	]

	[[nineth_custom_tooltip] 
	custom_tooltip = $nineth_custom_tooltip$
	if = {
		limit = {
			$nineth_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$nineth_effect$
	}
	]

	[[tenth_custom_tooltip] 
	custom_tooltip = $tenth_custom_tooltip$
		if = {
			limit = {
			$tenth_limit$
		}
		custom_tooltip = BONUS_REWARD_YES
	}
	else = { custom_tooltip = BONUS_REWARD_NO }
	tooltip = {
		$tenth_effect$
	}
	]

	[[combined_effect]
		if = {
			limit = {
			$first_limit$
			$second_limit$
			$third_limit$
			$fourth_limit$
			$fifth_limit$
			$sixth_limit$
			$seventh_limit$
			$eigth_limit$
			$nineth_limit$
			$tenth_limit$
		}
		custom_tooltip = COMBINED_BONUS_REWARD_YES
	}
	else = { custom_tooltip = COMBINED_BONUS_REWARD_NO }
	tooltip = {
		$combined_effect$
	}
	]

	hidden_effect = {
		if = {
			limit = { $first_limit$ }
			$first_effect$
		}
		[[second_custom_tooltip] 
		if = {
			limit = { $second_limit$ }
			$second_effect$
		}
		]
		[[third_custom_tooltip] 
		if = {
			limit = { $third_limit$ }
			$third_effect$
		}
		]
		[[fourth_custom_tooltip] 
		if = {
			limit = { $fourth_limit$ }
			$fourth_effect$
		}
		]
		[[fifth_custom_tooltip] 
		if = {
			limit = { $fifth_limit$ }
			$fifth_effect$
		}
		]
		[[sixth_custom_tooltip] 
		if = {
			limit = { $sixth_limit$ }
			$sixth_effect$
		}
		]
		[[seventh_custom_tooltip] 
		if = {
			limit = { $seventh_limit$ }
			$seventh_effect$
		}
		]
		[[eigth_custom_tooltip] 
		if = {
			limit = { $eigth_limit$ }
			$eigth_effect$
		}
		]
		[[nineth_custom_tooltip] 
		if = {
			limit = { $nineth_limit$ }
			$nineth_effect$
		}
		]
		[[tenth_custom_tooltip] 
		if = {
			limit = { $tenth_limit$ }
			$tenth_effect$
		}
		]
		[[combined_effect] 
		if = {
			limit = {
				$first_limit$
				$second_limit$
				$third_limit$
				$fourth_limit$
				$fifth_limit$
				$sixth_limit$
				$seventh_limit$
				$eigth_limit$
				$nineth_limit$
				$tenth_limit$
			}
			$combined_effect$
		}
		]
	}
}

pick_best_provinces = {
	[[scope]
		pick_best_provinces_2 = {
			scope = "$scope$"
			scale = "$scale$"
			event_target_name = "$event_target_name$"
			global_trigger = "$global_trigger$"
			1 = "$1$"
			2 = "$2$"
			3 = "$3$"
			4 = "$4$"
			5 = "$5$"
			10 = "$10$"
		}
		set_global_flag = PICK_BEST_PROVINCES_FLAG
	] #curses for not having an [ELSE ] or something.
	if = {
		limit = {
			NOT = { has_global_flag = PICK_BEST_PROVINCES_FLAG } #This check is here to prevent the algorithm from being run again after the scoped version was executed
		}
		pick_best_provinces_2 = {
			scope = " every_province "
			scale = "$scale$"
			event_target_name = "$event_target_name$"
			global_trigger = "$global_trigger$"
			1 = "$1$"
			2 = "$2$"
			3 = "$3$"
			4 = "$4$"
			5 = "$5$"
			10 = "$10$"
		}
	}
	else = { clr_global_flag = PICK_BEST_PROVINCES_FLAG }
}

pick_best_provinces_2 = {
	hidden_effect = {
		[[1]
			if = {
				limit = { always = $1$ }
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 1
				}
		}
		]
		[[2]
			if = {
				limit = { always = $2$ }
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 1
				}
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 2
				}
		}
		]
		[[3]
			if = {
				limit = { always = $3$ }
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 1
				}
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 2
				}
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 3
				}
			}
		]
		[[4]
			if = {
				limit = { always = $4$ }
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 1
				}
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 2
				}
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 3
				}
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 4
				}
		}
		]
		[[5]
			if = {
				limit = { always = $5$ }
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 1
				}
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 2
				}
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 3
				}
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 4
				}
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 5
				}
			}
		]
		[[10]
			if = {
				limit = { always = $10$ }
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 1
				}
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 2
				}
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 3
				}
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 4
				}
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 5
				}
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 6
				}
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 7
				}
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 8
				}
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 9
				}
				pick_best_province = {
					scale = "$scale$"
					scope = $scope$
					global_trigger = "$global_trigger$"
					event_target_name = "$event_target_name$"
					number = 10
				}
			}
		]
		$scope$ = {
		limit = {
				has_province_flag = $event_target_name$_exclude
			}
			clr_province_flag = $event_target_name$_exclude
		}
				}
			}

pick_best_province = {
	$scope$ = {
			limit = {
			[[global_trigger] $global_trigger$ ]
			NOT = { has_province_flag = $event_target_name$_exclude }
			}
		save_event_target_as = $event_target_name$_$number$
			}
	$scope$ = {
			limit = {
			[[global_trigger] $global_trigger$ ]
			$scale$ = event_target:$event_target_name$_$number$
			NOT = { has_province_flag = $event_target_name$_exclude }
		}
		save_event_target_as = $event_target_name$_$number$
	}
	event_target:$event_target_name$_$number$ = {
		set_province_flag = $event_target_name$_exclude
	}
}

create_general_with_pips = {
	create_general = {
		tradition = $tradition$
		[[add_fire] add_fire = $add_fire$ ]
		[[add_shock] add_shock = $add_shock$ ]
		[[add_manuever] add_manuever = $add_manuever$ ]
		[[add_siege] add_siege = $add_siege$ ]
		[[name] name = "$name$" ]
		[[culture] culture = $culture$ ]
	}
	custom_tooltip = ME_GENERAL_$add_fire$_$add_shock$_$add_manuever$_$add_siege$
}

give_province_claims = {
	$id$ = {
			if = {
				limit = {
				NOT = { is_core = $tag$ }
				NOT = { is_permanent_claim = $tag$ }
			}
			add_permanent_claim = $tag$
		}
	}
}

give_area_claims = {
	$group$ = {
		limit = {
			NOT = { is_core = $tag$ }
			NOT = { is_permanent_claim = $tag$ }
			}
		add_permanent_claim = $tag$
	}
			}

give_claims = {
	[[province]
		give_province_claims = { id = $province$ tag = ROOT }
	]
	[[id]
		give_province_claims = { id = $id$ tag = ROOT }
	]
	[[area]
		give_area_claims = { group = $area$ tag = ROOT }
	]
	[[region]
		give_area_claims = { group = $region$ tag = ROOT }
	]

}

add_power_projection_mission = {
	add_power_projection = {
		type = mission_rewards_power_projection
		amount = $amount$
	}
}

country_event_with_effect_insight = {
	country_event = {
		id = $id$
		[[days] days = $days$]
		[[random] random = $random$]
		[[tooltip] tooltip = $tooltip$]
	}
	custom_tooltip = EVENT_INSIGHT_INTRO
	tooltip = {
		$effect$
	}
}

country_event_with_option_insight = {
	country_event = {
		id = $id$
		[[days] days = $days$]
		[[random] random = $random$]
		[[tooltip] tooltip = $tooltip$]
	}
	custom_tooltip = EVENT_INSIGHT_INTRO
	custom_tooltip = EVENT_INSIGHT_OPT_1
	tooltip = {
		$option_1$
	}
	[[option_2]
		custom_tooltip = EVENT_INSIGHT_OPT_2
		tooltip = {
			$option_2$
		}
	]
	[[option_3]
		custom_tooltip = EVENT_INSIGHT_OPT_3
		tooltip = {
			$option_3$
		}
	]
	[[option_4]
		custom_tooltip = EVENT_INSIGHT_OPT_4
		tooltip = {
			$option_4$
		}
	]
	[[option_5]
		custom_tooltip = EVENT_INSIGHT_OPT_5
		tooltip = {
			$option_5$
		}
	]
}