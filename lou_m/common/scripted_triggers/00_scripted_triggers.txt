# SOME META SCRIPT EXAMPLES
# This also works for Scripted effects the same. Provided arguments will be pasted in
# wherever the key occurs. If it fails to compile you should get a proper error message
# and the source generated in the error log. There is no added overhead during runtime but
# if used extensivley it might make loading time longer.
#
# my_test_trigger = {
#	OR = {
#		has_country_modifier = $ARG1$_modifier
#		AND = {
#			has_country_modifier = $ARG2$_modifier
#			$CONTEXT$ = {
#				NOT = { has_country_modifier = $ARG1$_modifier }
#			}
#		}
#	}
# }
# Usage:
# my_test_trigger = { ARG1=foo ARG2=bar CONTEXT=FROM }

#GENERAL TRIGGERS
has_mil_advisor = {
	custom_trigger_tooltip = {
		tooltip = has_mil_advisor_tooltip
		OR = {
			advisor = army_organiser
			advisor = army_reformer
			advisor = commandant
			advisor = grand_captain
			advisor = recruitmaster
			advisor = fortification_expert
			advisor = quartermaster
		}
	}
}

has_mil_advisor_2 = {
	custom_trigger_tooltip = {
		tooltip = has_mil_advisor_2_tooltip
		OR = {
			army_organiser = 2
			army_reformer = 2
			commandant = 2
			grand_captain = 2
			recruitmaster = 2
			fortification_expert = 2
			quartermaster = 2
		}
	}
}

has_mil_advisor_3 = {
	custom_trigger_tooltip = {
		tooltip = has_mil_advisor_3_tooltip
		OR = {
			army_organiser = 3
			army_reformer = 3
			commandant = 3
			grand_captain = 3
			recruitmaster = 3
			fortification_expert = 3
			quartermaster = 3
		}
	}
}

has_adm_advisor = {
	custom_trigger_tooltip = {
		tooltip = has_adm_advisor_tooltip
		OR = {
			advisor = treasurer
			advisor = philosopher
			advisor = artist
			advisor = theologian
			advisor = master_of_mint
			advisor = inquisitor
			advisor = natural_scientist
		}
	}
}

has_adm_advisor_2 = {
	custom_trigger_tooltip = {
		tooltip = has_adm_advisor_2_tooltip
		OR = {
			treasurer = 2
			philosopher = 2
			artist = 2
			theologian = 2
			master_of_mint = 2
			inquisitor = 2
			natural_scientist = 2
		}
	}
}

has_adm_advisor_3 = {
	custom_trigger_tooltip = {
		tooltip = has_adm_advisor_3_tooltip
		OR = {
			treasurer = 3
			philosopher = 3
			artist = 3
			 theologian = 3
			master_of_mint = 3
			inquisitor = 3
			natural_scientist = 3
		}
	}
}


has_dip_advisor = {
	custom_trigger_tooltip = {
		tooltip = has_dip_advisor_tooltip
		OR = {
			advisor = statesman
			advisor = diplomat
			advisor = naval_reformer
			advisor = trader
			advisor = colonial_governor
			advisor = navigator
			advisor = spymaster
		}
	}
}

has_dip_advisor_2 = {
	custom_trigger_tooltip = {
		tooltip = has_dip_advisor_2_tooltip
		OR = {
			statesman = 2
			diplomat = 2
			naval_reformer = 2
			trader = 2
			colonial_governor = 2
			navigator = 2
			spymaster = 2
		}
	}
}

has_dip_advisor_3 = {
	custom_trigger_tooltip = {
		tooltip = has_dip_advisor_3_tooltip
		OR = {
			statesman = 3
			diplomat = 3
			naval_reformer = 3
			trader = 3
			colonial_governor = 3
			navigator = 3
			spymaster = 3
		}
	}
}


is_subject_other_than_tributary_trigger = { #Ie Tags that cannot conduct independent diplomacy
	custom_trigger_tooltip = {
		tooltip = is_subject_other_than_tributary_trigger_tooltip
		is_subject = yes
		NOT = { is_subject_of_type = tributary_state }
	}
}

is_free_or_tributary_trigger = { #I.e. Tags that can conduct independent diplomacy
	custom_trigger_tooltip = {
		tooltip = is_free_or_tributary_trigger_tooltip
		OR = {
			is_subject = no
			is_subject_of_type = tributary_state
		}
	}
}


# Third Rome Triggers
has_russian_government_interaction = {
	has_dlc = "Third Rome"
	always = no
}


#RIGHTS OF MAN TRIGGERS

#Ruler personality triggers
ruler_has_good_adm_personality = {
	has_dlc = "Rights of Man"
	OR = {
		ruler_has_personality = just_personality
		ruler_has_personality = righteous_personality
		ruler_has_personality = tolerant_personality
		ruler_has_personality = free_thinker_personality
		ruler_has_personality = calm_personality
		ruler_has_personality = zealot_personality
		ruler_has_personality = pious_personality
		ruler_has_personality = lawgiver_personality
		ruler_has_personality = midas_touched_personality
		ruler_has_personality = incorruptible_personality
		ruler_has_personality = architectural_visionary_personality
		ruler_has_personality = scholar_personality
	}
}

ruler_has_good_dip_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		ruler_has_personality = careful_personality
		ruler_has_personality = entrepreneur_personality
		ruler_has_personality = industrious_personality
		ruler_has_personality = expansionist_personality
		ruler_has_personality = navigator_personality
		ruler_has_personality = well_connected_personality
		ruler_has_personality = secretive_personality
		ruler_has_personality = intricate_web_weaver_personality
		ruler_has_personality = benevolent_personality
		ruler_has_personality = charismatic_negotiator_personality
		ruler_has_personality = silver_tongue_personality
	}
}

ruler_has_good_mil_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		ruler_has_personality = bold_fighter_personality
		ruler_has_personality = tactical_genius_personality
		ruler_has_personality = fierce_negotiator_personality
		ruler_has_personality = conqueror_personality
		ruler_has_personality = strict_personality
		ruler_has_personality = inspiring_leader_personality
		ruler_has_personality = martial_educator_personality
		ruler_has_personality = kind_hearted_personality
	}
}

ruler_has_bad_adm_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		ruler_has_personality = embezzler_personality
		ruler_has_personality = sinner_personality
		ruler_has_personality = greedy_personality
		ruler_has_personality = obsessive_perfectionist_personality
	}
}

ruler_has_bad_dip_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		ruler_has_personality = drunkard_personality
		ruler_has_personality = babbling_buffoon_personality
		ruler_has_personality = cruel_personality
		ruler_has_personality = naive_personality
		ruler_has_personality = malevolent_personality
		ruler_has_personality = loose_lips_personality
	}
}

ruler_has_bad_mil_personality = {
	has_dlc = "Rights of Man" 
	#OR = {
	ruler_has_personality = craven_personality
	#}
}

#Heir personality triggers
heir_has_good_adm_personality = {
	has_dlc = "Rights of Man"
	OR = {
		heir_has_personality = just_personality
		heir_has_personality = righteous_personality
		heir_has_personality = tolerant_personality
		heir_has_personality = free_thinker_personality
		heir_has_personality = calm_personality
		heir_has_personality = zealot_personality
		heir_has_personality = pious_personality
		heir_has_personality = lawgiver_personality
		heir_has_personality = midas_touched_personality
		heir_has_personality = incorruptible_personality
		heir_has_personality = architectural_visionary_personality
		heir_has_personality = scholar_personality
	}
}

heir_has_good_dip_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		heir_has_personality = careful_personality
		heir_has_personality = entrepreneur_personality
		heir_has_personality = industrious_personality
		heir_has_personality = expansionist_personality
		heir_has_personality = navigator_personality
		heir_has_personality = well_connected_personality
		heir_has_personality = secretive_personality
		heir_has_personality = intricate_web_weaver_personality
		heir_has_personality = benevolent_personality
		heir_has_personality = charismatic_negotiator_personality
		heir_has_personality = silver_tongue_personality

	}
}

heir_has_good_mil_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		heir_has_personality = bold_fighter_personality
		heir_has_personality = tactical_genius_personality
		heir_has_personality = fierce_negotiator_personality
		heir_has_personality = conqueror_personality
		heir_has_personality = strict_personality
		heir_has_personality = inspiring_leader_personality
		heir_has_personality = martial_educator_personality
		heir_has_personality = kind_hearted_personality
	}
}

heir_has_bad_adm_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		heir_has_personality = embezzler_personality
		heir_has_personality = sinner_personality
		heir_has_personality = greedy_personality
		heir_has_personality = obsessive_perfectionist_personality
	}
}

heir_has_bad_dip_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		heir_has_personality = drunkard_personality
		heir_has_personality = babbling_buffoon_personality
		heir_has_personality = cruel_personality
		heir_has_personality = naive_personality
		heir_has_personality = malevolent_personality
		heir_has_personality = loose_lips_personality
	}
}

heir_has_bad_mil_personality = {
	has_dlc = "Rights of Man" 
	#OR = {
	heir_has_personality = craven_personality
	#}
}

#Queen personality triggers
consort_has_good_adm_personality = {
	has_dlc = "Rights of Man"
	OR = {
		consort_has_personality = just_personality
		consort_has_personality = righteous_personality
		consort_has_personality = tolerant_personality
		consort_has_personality = free_thinker_personality
		consort_has_personality = calm_personality
		consort_has_personality = zealot_personality
		consort_has_personality = pious_personality
		consort_has_personality = lawgiver_personality
		consort_has_personality = midas_touched_personality
		consort_has_personality = incorruptible_personality
		consort_has_personality = architectural_visionary_personality
		consort_has_personality = scholar_personality
	}
}

consort_has_good_dip_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		consort_has_personality = careful_personality
		consort_has_personality = entrepreneur_personality
		consort_has_personality = industrious_personality
		consort_has_personality = expansionist_personality
		consort_has_personality = navigator_personality
		consort_has_personality = well_connected_personality
		consort_has_personality = secretive_personality
		consort_has_personality = intricate_web_weaver_personality
		consort_has_personality = benevolent_personality
		consort_has_personality = charismatic_negotiator_personality
		consort_has_personality = silver_tongue_personality

	}
}

consort_has_good_mil_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		consort_has_personality = bold_fighter_personality
		consort_has_personality = tactical_genius_personality
		consort_has_personality = fierce_negotiator_personality
		consort_has_personality = conqueror_personality
		consort_has_personality = strict_personality
		consort_has_personality = inspiring_leader_personality
		consort_has_personality = martial_educator_personality
		consort_has_personality = kind_hearted_personality
	}
}

consort_has_bad_adm_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		consort_has_personality = embezzler_personality
		consort_has_personality = sinner_personality
		consort_has_personality = greedy_personality
		consort_has_personality = obsessive_perfectionist_personality
	}
}

consort_has_bad_dip_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		consort_has_personality = drunkard_personality
		consort_has_personality = babbling_buffoon_personality
		consort_has_personality = cruel_personality
		consort_has_personality = naive_personality
		consort_has_personality = malevolent_personality
		consort_has_personality = loose_lips_personality
	}
}

consort_has_bad_mil_personality = {
	has_dlc = "Rights of Man" 
	#OR = {
	consort_has_personality = craven_personality
	#}
}
 
can_have_center_of_reformation_trigger = { #Province Scope
	#$RELIGION$ needs to match the religion of the center that is being spawned.
	always = no
}

province_viable_for_industrialization_events_trigger = { #Province Scope
	always = no
}

unindustrialized_province_trigger = { #Province Scope
	#NOT = { has_province_flag = canals_and_turnpikes_flag }
	#NOT = { has_province_flag = agricultural_revolution_province }
	NOT = { has_province_flag = had_economic_urbanization }
	NOT = { has_province_flag = swapped_to_cloth }
	NOT = { has_province_flag = swapped_to_paper }
	NOT = { has_province_flag = swapped_to_glass }
	NOT = { has_province_flag = industrial_urbanization }
	NOT = { has_province_flag = metalwork_center }
	NOT = { has_province_flag = textile_center }
	NOT = { has_province_flag = shipyards_of_x }
}

industrialized_province_trigger = { #Province Scope
	OR = {
		#has_province_flag = canals_and_turnpikes_flag
		#has_province_flag = agricultural_revolution_province
		has_province_flag = had_economic_urbanization 
		has_province_flag = swapped_to_cloth
		has_province_flag = swapped_to_paper
		has_province_flag = swapped_to_glass
		has_province_flag = industrial_urbanization
		has_province_flag = metalwork_center
		has_province_flag = textile_center
		has_province_flag = shipyards_of_x
	}
}

was_never_end_game_tag_trigger = {	#Country Scope
	always = no
}


was_never_german_regional_tag_trigger = {	#Country Scope
	always = no
}


has_manufactory_trigger = { #Province Scope
	custom_trigger_tooltip = {
		tooltip = has_manufactory_trigger_tooltip
		OR = {
			has_building = wharf
			has_building = weapons
			has_building = textile
			has_building = tradecompany
			has_building = farm_estate
			has_building = mills
			has_building = furnace
			has_building = plantations
			has_building = ramparts
			has_building = soldier_households
			has_building = impressment_offices
			has_building = state_house
		}
	}
}

#Use this one if you want it to say which manufactory has to be built
# Does not include 1.30 manufactories
has_manufactory_no_custom_tooltip_trigger = { #Province Scope
	if = {
		limit = {
			OR = {
				trade_goods = naval_supplies
				trade_goods = fish
				trade_goods = salt
			}
		}
		has_building = wharf
	}
	else_if = {
		limit = {
			OR = {
				trade_goods = copper
				trade_goods = iron
			}
		}
		has_building = weapons
	}
	else_if = {
		limit = {
			OR = {
				trade_goods = wool
				trade_goods = cloth
				trade_goods = silk
				trade_goods = dyes
			}
		}
		has_building = textile
	}
	else_if = {
		limit = {
			OR = {
				trade_goods = ivory
				trade_goods = slaves
				trade_goods = spices
				#trade_goods = cloves
				trade_goods = fur
				trade_goods = incense
			}
		}
		has_building = tradecompany
	}
	else_if = {
		limit = {
			OR = {
				trade_goods = grain
				trade_goods = livestock
				trade_goods = wine
			}
		}
		has_building = farm_estate
	}
	else_if = {
		limit = {
			OR = {
				trade_goods = paper
				trade_goods = gems
				trade_goods = tropical_wood
				trade_goods = glass
				trade_goods = chinaware
			}
		}
		has_building = mills
	}
	else_if = {
		limit = {
			trade_goods = coal
		}
		has_building = furnace
	}
	else = {
		has_building = plantations
	}
}

has_no_manufactory_trigger = { #Province Scope
	NOT = { has_building = wharf }
	NOT = { has_building = weapons }
	NOT = { has_building = textile }
	NOT = { has_building = tradecompany }
	NOT = { has_building = farm_estate }
	NOT = { has_building = mills }
	NOT = { has_building = plantations }
	NOT = { has_building = furnace }
	NOT = { has_building = ramparts }
	NOT = { has_building = soldier_households }
	NOT = { has_building = impressment_offices }
	NOT = { has_building = state_house }
}

# Does not include new manufactories - they don't fit for the purposes of this trigger
root_can_build_manufactory_here_trigger = {
    has_no_manufactory_trigger = yes
    num_free_building_slots = 1
	OR = {
		AND = {
            OR = {
                trade_goods = naval_supplies
                trade_goods = fish
                trade_goods = salt
            }
			ROOT = { dip_tech = 11 }
		}
		AND = {
            OR = {
                trade_goods = copper
                trade_goods = iron
            }
			ROOT = { mil_tech = 11 }
		}
		AND = {
            OR = {
                trade_goods = wool
                trade_goods = cloth
                trade_goods = silk
                trade_goods = dyes
            }
			ROOT = { adm_tech = 11 }
		}
		AND = {
            OR = {
                trade_goods = coffee
                trade_goods = cotton
                trade_goods = sugar
                trade_goods = tobacco
                trade_goods = tea
                trade_goods = cocoa
            }
			ROOT = { adm_tech = 14 }
		}
		AND = {
            OR = {
                trade_goods = ivory
                trade_goods = slaves
                trade_goods = spices
                #trade_goods = cloves
                trade_goods = fur
                trade_goods = incense
            }
			ROOT = { dip_tech = 14 }
		}
		AND = {
            OR = {
                trade_goods = grain
                trade_goods = livestock
                trade_goods = wine
            }
			ROOT = { adm_tech = 6 }
		}
		AND = {
            OR = {
                trade_goods = paper
                trade_goods = gems
                trade_goods = tropical_wood
                trade_goods = glass
                trade_goods = chinaware
            }
			ROOT = { adm_tech = 16 }
		}
		AND = {
            trade_goods = coal
			ROOT = { adm_tech = 21 }
		}
	}
}

has_nobles_trade_good_trigger = {
	OR = {
		trade_goods = copper
		trade_goods = iron
		trade_goods = livestock
		trade_goods = grain
		trade_goods = gems
		trade_goods = slaves
	}
}

has_burghers_trade_good_trigger = {
	OR = {
		trade_goods = naval_supplies
		trade_goods = salt
		trade_goods = coffee
		trade_goods = cotton
		trade_goods = sugar
		trade_goods = tobacco
		trade_goods = tea
		trade_goods = cocoa
		trade_goods = cloth
		trade_goods = silk
		trade_goods = dyes
		trade_goods = coal
		trade_goods = spices
		#trade_goods = cloves
		trade_goods = tropical_wood
		trade_goods = glass
		trade_goods = chinaware
		trade_goods = paper
		trade_goods = ivory
		trade_goods = fish
	}
}

has_church_trade_good_trigger = {
	OR = {
		trade_goods = wool
		trade_goods = fur
		trade_goods = wine
		trade_goods = slaves
		trade_goods = incense
		trade_goods = fish
	}
}

has_dharma_elephants_trigger = {
	OR = {
		has_dlc = "Dharma"
		has_dlc = "Dharma - Indian Sultanate Pack"
		has_dlc = "Dharma - Hindu Unit Pack"
	}
	always = no
}

# This is for when we want to award government reform progress and need to check if that's useful to the player based on dlc ownership
has_completed_all_reforms_trigger = {
	custom_trigger_tooltip = {
		tooltip = has_completed_all_reforms_trigger_tooltip
		NOT = { has_dlc = "Emperor" }
		OR = {
			AND = {
				government = monarchy
				reform_level = 11
			}
			AND = {
				government = republic
				reform_level = 13
			}
			AND = {
				government = theocracy
				reform_level = 13
			}
			AND = {
				government = native
				reform_level = 5
			}
			AND = {
				government = tribal
				reform_level = 6
			}
		}
	}
}

# This is for all other situations
has_final_tier_reforms_trigger = {
	custom_trigger_tooltip = {
		tooltip = has_completed_all_reforms_trigger_tooltip
		OR = {
			AND = {
				government = monarchy
				reform_level = 11
			}
			AND = {
				government = republic
				reform_level = 13
			}
			AND = {
				government = theocracy
				reform_level = 13
			}
			AND = {
				government = native
				reform_level = 5
			}
			AND = {
				government = tribal
				reform_level = 6
			}
		}
	}
}

has_holy_order_trigger = {
	if = {
		limit = {
			has_dlc = "Golden Century"
		}
		always = no
	}
}

same_govt_as_root_trigger = {
	custom_trigger_tooltip = {
		tooltip = same_govt_as_root_tt
		OR = {
			AND = {
				government = theocracy
				root = { government = theocracy }
			}
			AND = {
				government = monarchy
				root = { government = monarchy }
			}
			AND = {
				government = republic
				root = { government = republic }
			}
			AND = {
				government = dictatorship
				root = { government = dictatorship }
			}
			AND = {
				government = tribal
				root = { government = tribal }
			}
			AND = {
				government = native
				root = { government = native }
			}
		}
	}
}

# Building triggers

has_tax_building_trigger = {
	custom_trigger_tooltip = {
		tooltip = has_tax_building_trigger_tt
		OR = {
			has_building = temple_building
			has_building = tax_office_building
			has_building = provincial_office_building
			has_building = bank_building

			has_building = temple_elf_building
			has_building = theatre_elf_building
			has_building = amphitheatre_elf_building

			has_building = armoury_dwarf_building
			has_building = forge_dwarf_building
			has_building = arsenal_dwarf_building

			has_building = enforcer_camp_orc_building
			has_building = overseer_station_orc_building
			has_building = overseer_tower_orc_building
		}
	}
}

has_trade_building_trigger = {
	custom_trigger_tooltip = {
		tooltip = has_trade_building_trigger_tt
		OR = {
			has_building = trade_outpost_building
			has_building = marketplace_building
			has_building = trade_depot_building
			has_building = forum_building

			has_building = elven_fairground_elf_building
			has_building = craftsmen_plaza_elf_building
			has_building = exotic_wares_market_elf_building

			has_building = material_exchance_dwarf_building
			has_building = fairground_dwarf_building
			has_building = great_market_dwarf_building

			has_building = meat_depot_orc_building
			has_building = treasure_trove_orc_building
			has_building = stockpile_orc_building
		}
	}
}

has_production_building_trigger = {
	custom_trigger_tooltip = {
		tooltip = has_production_building_trigger_tt
		OR = {
			has_building = work_camp_building
			has_building = workshop_building
			has_building = warehouse_building
			has_building = stockpile_building
			has_building = forge_building
			has_building = foundry_building

			has_building = workshop_elf_building
			has_building = elven_forge_elf_building
			has_building = grand_forge_elf_building

			has_building = mine_shaft_dwarf_building
			has_building = mining_network_dwarf_building
			has_building = materials_depot_building

			has_building = blacksmith_orc_building
			has_building = metal_works_orc_building
			has_building = dark_iron_forge_orc_building
		}
	}
}

has_manpower_building_trigger = {
	custom_trigger_tooltip = {
		tooltip = has_manpower_building_trigger_tt
		OR = {
			has_building = outpost_building
			has_building = army_camp_building
			has_building = barracks_building
			has_building = garrison_building

			has_building = warriors_gallery_building
			has_building = heros_shrine_building

			has_building = mustering_hall_dwarf_building
			has_building = training_hall_dwarf_building
			has_building = hall_of_warriors_dwarf_building

			has_building = orc_pit_orc_building
			has_building = orc_fissure_orc_building
			has_building = army_garrison_orc_building
		}
	}
}

has_shipyard_building_trigger = {
	custom_trigger_tooltip = {
		tooltip = has_shipyard_building_trigger_tt
		OR = {
			has_building = port_building
			has_building = dock_building
			has_building = seaport_building
			has_building = dockyard_building
			has_building = drydock_building
			has_building = grand_shipyard_building

			has_building = port_elf_building
			has_building = seaport_elf_building
			has_building = harbour_elf_building
			has_building = haven_elf_building
		}
	}
}

has_dock_building_trigger = {
	custom_trigger_tooltip = {
		tooltip = has_dock_building_trigger_tt
		always = no
	}
}

has_forcelimit_building_trigger = {
	custom_trigger_tooltip = {
		tooltip = has_forcelimit_building_trigger_tt
		always = no
	}
}

has_courthouse_building_trigger = {
	custom_trigger_tooltip = {
		tooltip = has_courthouse_building_trigger_tt
		always = no
	}
}

has_fort_building_trigger = {
	custom_trigger_tooltip = {
		tooltip = has_fort_building_trigger_tt
		OR = {
			has_building = fort_pallisade_building
			has_building = fort_castle_building
			has_building = fort_stronghold_building
			has_building = fort_citidal_building

			has_building = fort_low_walls_elf_building
			has_building = fort_high_walls_elf_building

			has_building = fort_small_gatehouse_dwarf_building
			has_building = fort_great_gatehouse_dwarf_building
			has_building = fort_mountain_fortress_dwarf_building
			has_building = fort_mountain_citidal_dwarf_building
			has_building = fort_pallisade_dwarf_building
			has_building = fort_castle_dwarf_building

			has_building = fort_pallisade_orc_building
			has_building = fort_wooden_walls_orc_building
			has_building = fort_orc_stronghold_orc_building
			has_building = fort_large_orc_stronghold_orc_building
		}
	}
}

has_coast_defense_building_trigger = {
	custom_trigger_tooltip = {
		tooltip = has_coast_defense_building_trigger_tt
		always = no
	}
}

has_been_insulted_by_root = {
	custom_trigger_tooltip = {
		tooltip = has_been_insulted_by_root
		OR = {
			has_opinion_modifier = {
				who = ROOT
				modifier = insulted
			}
			has_opinion_modifier = {
				who = ROOT
				modifier = scornfully_insulted
			}
		}
	}
}

valid_for_personal_unions_trigger = {
	exists = yes
	is_subject = no
	government = monarchy
	#religion_group = christian
}

is_shadow_kingdom_eligible_trigger = {
	always = no
}

will_leave_for_shadow_kingdom_trigger = {
	always = no
}


is_germanic_but_not_swamp = {
	always = no
}

is_germanic_but_not_mountains = {
	always = no
}

#province scope; checks it is highest or joint highest supply limit in the area owned by you (useful for spawning rebels)
highest_supply_limit_in_area = {
	NOT = {
		area_for_scope_province = { 
			NOT = { province_id = prev }
			owned_by = root
			supply_limit = prev 
			NOT = { prev = { supply_limit = prev } }
		}
	}
}

# Has current fort level
province_has_current_tech_fort_trigger = {
	custom_trigger_tooltip = {
		tooltip = province_has_current_tech_fort_trigger_tt
		always = no
	}
}



province_has_current_tech_trade_trigger = {
	custom_trigger_tooltip = {
		tooltip = province_has_current_tech_trade_trigger_tt
		always = no
	}
}


check_reducing_estate_revolt_size_trigger = {
	if = {
		limit = {
			NOT = { num_of_cities = 16 }
		}
		NOT = {
			num_of_owned_provinces_with = {
				value = 2
				has_province_flag = $FLAG$
			}
		}
	}
	else_if = {
		limit = {
			NOT = { num_of_cities = 24 }
		}
		NOT = {
			num_of_owned_provinces_with = {
				value = 3
				has_province_flag = $FLAG$
			}
		}
	}
	else_if = {
		limit = {
			NOT = { num_of_cities = 36 }
		}
		NOT = {
			num_of_owned_provinces_with = {
				value = 4
				has_province_flag = $FLAG$
			}
		}
	}
	else_if = {
		limit = {
			NOT = { num_of_cities = 56 }
		}
		NOT = {
			num_of_owned_provinces_with = {
				value = 5
				has_province_flag = $FLAG$
			}
		}
	}
	else_if = {
		limit = {
			NOT = { num_of_cities = 80 }
		}
		NOT = {
			num_of_owned_provinces_with = {
				value = 6
				has_province_flag = $FLAG$
			}
		}
	}
	else_if = {
		limit = {
			NOT = { num_of_cities = 100 }
		}
		NOT = {
			num_of_owned_provinces_with = {
				value = 7
				has_province_flag = $FLAG$
			}
		}
	}
	else = {
		NOT = {
			num_of_owned_provinces_with = {
				value = 8
				has_province_flag = $FLAG$
			}
		}
	}
}

check_reducing_estate_revolt_size_more_trigger = {
	if = {
		limit = {
			NOT = { num_of_cities = 10 }
		}
		NOT = {
			num_of_owned_provinces_with = {
				value = 2
				has_province_flag = $FLAG$
			}
		}
	}
	else_if = {
		limit = {
			NOT = { num_of_cities = 16 }
		}
		NOT = {
			num_of_owned_provinces_with = {
				value = 3
				has_province_flag = $FLAG$
			}
		}
	}
	else_if = {
		limit = {
			NOT = { num_of_cities = 24 }
		}
		NOT = {
			num_of_owned_provinces_with = {
				value = 4
				has_province_flag = $FLAG$
			}
		}
	}
	else_if = {
		limit = {
			NOT = { num_of_cities = 36 }
		}
		NOT = {
			num_of_owned_provinces_with = {
				value = 5
				has_province_flag = $FLAG$
			}
		}
	}
	else = {
		NOT = {
			num_of_owned_provinces_with = {
				value = 6
				has_province_flag = $FLAG$
			}
		}
	}
}

is_revolutionary_republic_trigger = {
	always = no
}

revolution_event_can_happen_trigger = {
	OR = {
		revolution_target_exists = no
		has_dlc = "Emperor"
	}
	OR = {
		capital_scope = { 
#			continent = europe 
			controlled_by = revolutionary_rebels
		}
		has_country_modifier = just_lost_to_revolutionary_rebels
		has_country_flag = revolution_disaster_immediate_revolution
	}
	is_revolutionary = no
}
#country scope, used in election events to check whether generated rulers may be female
republic_with_female_rulers_trigger = {
	always = no
}

is_absolutism_active = {
	always = yes
}

is_southeast_tribe = {
	always = no
}

is_iroquois = {
	always = no
}

is_volcanic_area = { #polynesia and indonesia
always = no
}

#Country scope
is_or_was_tag = {
	OR = {
		tag = $tag$
		was_tag = $tag$
	}
}

#Province scope
is_trade_node_province = {
	custom_trigger_tooltip = {
		tooltip = is_trade_node_province_tt
		always = no
	}
}

is_inland_trade_node_province = {
	custom_trigger_tooltip = {
		tooltip = is_inland_trade_node_province_tt
		always = no
	}
}

is_not_inland_trade_node_province = {
	custom_trigger_tooltip = {
		tooltip = is_not_inland_trade_node_province_tt
		always = no
	}
}

#Province scope
is_european_trade_node_province = {
	always = no
}

european_trade_node_scope = {
	always = no
}

#Province scope
is_indian_trade_node_province = {
	always = no
}

#Province scope
is_african_trade_node_province = {
	always = no
}

#Province scope
is_american_trade_node_province = {
	always = no
}

#Needed for the Russian dynamic mission...
is_in_persian_trade_node = {
	always = no
}

has_any_colonist_idea = {
	always = no
}

has_completed_idea_group_of_category = {
	[[adm_ideas]
		custom_trigger_tooltip = {
			tooltip = has_completed_one_adm_idea_group
			OR = {
				full_idea_group = innovativeness_ideas
				full_idea_group = shadow_of_melkor_ideas
				full_idea_group = light_of_eru_ideas
				full_idea_group = economic_ideas
				full_idea_group = administrative_ideas
				full_idea_group = humanist_ideas
				full_idea_group = infrastructure_ideas
			}
		}
	]
	[[dip_ideas]
		custom_trigger_tooltip = {
			tooltip = has_completed_one_dip_idea_group
			OR = {
				full_idea_group = spy_ideas
				full_idea_group = diplomatic_ideas
				full_idea_group = trade_ideas
				full_idea_group = maritime_ideas
				full_idea_group = influence_ideas
				full_idea_group = court_ideas
			}
		}
	]
	[[mil_ideas]
		custom_trigger_tooltip = {
			tooltip = has_completed_one_mil_idea_group
			OR = {
				full_idea_group = aristocracy_ideas
				full_idea_group = offensive_ideas
				full_idea_group = defensive_ideas
				full_idea_group = quality_ideas
				full_idea_group = quantity_ideas
				full_idea_group = naval_ideas
				full_idea_group = theocracy_gov_ideas
				full_idea_group = indigenous_ideas
				full_idea_group = horde_gov_ideas
				full_idea_group = plutocracy_ideas
				full_idea_group = mercenary_ideas
			}
		}
	]
}

num_of_completed_idea_groups_by_category = {
	calc_true_if = {
		[[adm_ideas]
			full_idea_group = innovativeness_ideas
			full_idea_group = shadow_of_melkor_ideas
			full_idea_group = light_of_eru_ideas
			full_idea_group = economic_ideas
			full_idea_group = expansion_ideas
			full_idea_group = humanist_ideas
			full_idea_group = infrastructure_ideas
		]
		[[dip_ideas]
			full_idea_group = spy_ideas
			full_idea_group = diplomatic_ideas
			full_idea_group = trade_ideas
			full_idea_group = maritime_ideas
			full_idea_group = influence_ideas
			full_idea_group = court_ideas
		]
		[[mil_ideas]
			full_idea_group = aristocracy_ideas
			full_idea_group = offensive_ideas
			full_idea_group = defensive_ideas
			full_idea_group = quality_ideas
			full_idea_group = quantity_ideas
			full_idea_group = naval_ideas
			full_idea_group = theocracy_gov_ideas
			full_idea_group = indigenous_ideas
			full_idea_group = horde_gov_ideas
			full_idea_group = plutocracy_ideas
			full_idea_group = mercenary_ideas
		]
		amount = $amount$
	}
}

has_religion_of_increased_opinion_for_scope = {
	always = no
}

reverse_has_religion_of_increased_opinion_for_scope = {
	always = no
}

mal_will_accept_offer = {
	$province$ = {
		owner = {
			OR = {
				alliance_with = ROOT
				is_subject_of = ROOT
				has_opinion = {
					who = ROOT
					value = 100
				}
			}
		}
	}
}

mal_very_highly_to_accept_offer = {
	$province$ = {
		owner = {
			has_opinion = {
				who = ROOT
				value = 50
			}
		}
	}
}

mal_might_or_might_not_accept_offer = {
	$province$ = {
		owner = {
			has_opinion = {
				who = ROOT
				value = -50
			}
			NOT = {
				has_opinion = {
					who = ROOT
					value = 50
				}
			}
		}
	}
}

mal_very_likely_to_not_accept_offer = {
	$province$ = {
		owner = {
			NOT = {
				has_opinion = {
					who = ROOT
					value = 50
				}
			}
		}
	}
}

mal_will_never_accept_offer = {
	$province$ = {
		owner = {
			OR = {
				is_rival = ROOT
				is_enemy = ROOT
				NOT = {
					has_opinion = {
						who = ROOT
						value = 100
					}
				}
			}
		}
	}
}

has_any_heir_cult_active = {
	OR = {
		has_country_modifier = junior_yemoja_cult
		has_country_modifier = junior_roog_cult
		has_country_modifier = junior_nyame_cult
		has_country_modifier = junior_cwezi_cult
		has_country_modifier = junior_central_african_ancestor_cult
		has_country_modifier = junior_mwari_cult
		has_country_modifier = junior_enkai_cult
		has_country_modifier = junior_waaq_cult
		has_country_modifier = junior_zanahary_cult
		has_country_modifier = junior_christianity_cult
		has_country_modifier = junior_islam_cult
		has_country_modifier = junior_buddhism_cult
		has_country_modifier = junior_dharmic_cult
		has_country_modifier = junior_south_central_american_cult
		has_country_modifier = junior_norse_cult
		has_country_modifier = junior_jewish_cult
		has_country_modifier = junior_zoroastrian_cult
	}
}

gained_development_from_building = {
	has_province_flag = built_dev_$building$
}
gained_dev_from_eco_building = {
	has_province_flag = built_eco_dev_$building$
}

gained_development_from_any_building = {
	always = no
}

has_primary_cult = {
	has_country_flag = has_$cult$_as_primary_cult
}

has_a_primary_cult_selected = {
	custom_trigger_tooltip = {
		tooltip = has_a_primary_cult_selected_tt
		has_country_flag = has_selected_a_primary_cult
	}
}

has_better_tech_than_westerns = {
	custom_trigger_tooltip = {
		tooltip = has_better_tech_than_westerns_tt
		always = no
	}
}

has_more_institutions_than_westerns = {
	custom_trigger_tooltip = {
		tooltip = has_more_institutions_than_westerns_tt
		always = no
	}
}

is_not_free_merc_company = {
	ROOT = {
		always = no
	}
}

has_free_mercs_trait = {
	OR = {
		has_government_attribute = mercs_do_not_cost_army_professionalism
		has_country_flag = fra_free_mercs_bargain_sale_flag
	}
}

has_not_free_mercs_trait = {
	NOT = { has_government_attribute = mercs_do_not_cost_army_professionalism }
	NOT = { has_country_flag = fra_free_mercs_bargain_sale_flag }
}

##########################################################
# Supports following merc companies
# merc_oyo_cavalry
# merc_hakkapeliita_cavalry
# merc_prussian_volunteer_army
# merc_large_hakkapeliita_cavalry
# merc_guerilla_hakkapeliita_cavalry
# merc_elite_hakkapeliita_cavalry
# merc_schwarze_garde
# merc_hessian_jaegerkorps
# merc_doppelsoeldner
# merc_frisian_free_company
# merc_flemish_company
# merc_reislaufer
##########################################################
# When adding a new merc company then make sure that a unlock_$merc_company$_tt is defined in the localization
# For localization purposes use the following line: "Has unlocked the §Y$merc_company$§! mercenary company."

has_unlocked_estate_privilege = {
	has_country_flag = unlocked_privilege_$estate_privilege$
}

has_unlocked_merc_company = {
	custom_trigger_tooltip = {
		tooltip = has_unlocked_$merc_company$
		has_country_flag = unlocked_$merc_company$
	}
}

##########################################################
# Supports following merc companies
##########################################################
# When adding a new merc company then make sure that a unlock_$merc_company$_tt is defined in the localization
# For localization purposes use the following line: "The §Y$merc_company$§! mercenary company has been globally unlocked."
has_globally_unlocked_merc_company = {
	custom_trigger_tooltip = {
		tooltip = has_globally_unlocked_$merc_company$
		has_global_flag = global_unlocked_$merc_company$
	}

}

has_unlocked_government_reform = {
	has_country_flag = unlocked_$government_reform$
}

has_unlocked_estate = {
	has_country_flag = unlocked_$estate$
}

#### Supports the following government reforms ####
# prussian_monarchy
# prussian_monarchy_base
# prussian_republic_reform
# prussian_theocratic_reform
# livonian_military_monarchy
# livonian_naval_monarchy
# livonian_trade_monarchy
# livonian_theocratic_monarchy
# livonian_elective_monarchy
# livonian_monarchy
# livonian_mercenary_monarchy
# livonian_diplomatic_monarchy
# livonian_constitutional_monarchy
# livonian_administrative_monarchy
# livonian_admiral_monarchy
# livonian_naval_controlled_monarchy
# livonian_general_controlled_monarchy
# livonian_absolute_monarchy
# livonian_enlightened_monarchy
has_unlocked_government_reform_tooltip = {
	custom_trigger_tooltip = {
		tooltip = unlocked_$government_reform$_tt
		has_country_flag = unlocked_$government_reform$
	}
}

mal_target_country_exists_in_region = {
	always = no
}

mal_owns_provinces_in_region = {
	always = no
}

province_is_or_accepts_culture = {
	OR = {
		has_owner_culture = yes
		has_owner_accepted_culture = yes
	}
}

secondary_religion_group = {
	always = no
}

#Buddhism is its own can of worms due to the so many aspects of it
#This was one of the few moments where it was almost worth considering putting Buddhism in its own religion group - almost
province_is_buddhist_or_accepts_buddhism = {
	always = no
}

#Had to make a new scripted trigger or otherwise the conditions looks too cluttered...
province_is_buddhist_or_accepts_buddhism_or_is_dharmic = {
	always = no
}

province_is_or_accepts_religion_group = { 
	custom_trigger_tooltip = {
		tooltip = province_is_or_accepts_$religion_group$_tt
		OR = {
			AND = {
				religion_group = $religion_group$
				has_owner_religion = yes
			}
			AND = {
				owner = { secondary_religion_group = $religion_group$ }
				OR = {
					religion_group = $religion_group$
					has_owner_religion = yes
				}
			}
		}
	}
}

province_is_or_accepts_religion = {
	custom_trigger_tooltip = {
		tooltip = province_is_or_accepts_$religion$_tt
		OR = {
			AND = {
				religion = $religion$
				has_owner_religion = yes
			}
			AND = {
				owner = { secondary_religion = $religion$ }
				OR = {
					religion = $religion$
					has_owner_religion = yes
				}
			}
		}
	}
}

has_not_any_exploration_ideas = {
	always = no
}

has_any_exploration_idea = {
	always = no
}

###HAS ANY TRADE GOODS IMPORTANT FOR THE MANUFACTORIES###
#For Wharf manufactories
has_wharf_trade_goods = {
	OR = {
		trade_goods = salt
		trade_goods = fish
		trade_goods = naval_supplies
	}
}

#For Weapons manufactories
has_weapons_trade_goods = {
	OR = {
		trade_goods = copper
		trade_goods = iron
	}
}

#For Textile manufactories
has_textile_trade_goods = {
	OR = {
		trade_goods = wool
		trade_goods = cloth
		trade_goods = silk
		trade_goods = dyes
	}
}

#For Plantation manufactories
has_plantation_trade_goods = {
	OR = {
		trade_goods = coffee
		trade_goods = cotton
		trade_goods = sugar
		trade_goods = tobacco
		trade_goods = tea
		trade_goods = cocoa
	}
}

#For Trade Company manufactories
has_trade_company_trade_goods = {
	OR = {
		trade_goods = ivory
		trade_goods = slaves
		trade_goods = spices
		trade_goods = fur
		trade_goods = incense
		#trade_goods = cloves
	}
}

#For Farm manufactories
has_farm_trade_goods = {
	OR = {						
		trade_goods = grain
		trade_goods = livestock
		trade_goods = wine
	}
}

#For Mills manufactories
has_mills_trade_goods = {
	OR = {
		trade_goods = paper
		trade_goods = gems
		trade_goods = tropical_wood
		trade_goods = glass
		trade_goods = chinaware
	}
}

#For special gold trade goods
has_valuable_resource = {
	trade_goods = gold
}

#country scope
ruler_total_stats = {
	variable_arithmetic_trigger = {
		custom_tooltip = ruler_total_stats_$stats$
		export_to_variable = {
			variable_name = ruler_adm
			value = ADM
			who = ROOT
		}
		export_to_variable = {
			variable_name = ruler_dip
			value = DIP
			who = ROOT
		}
		export_to_variable = {
			variable_name = ruler_mil
			value = MIL
			who = ROOT
		}
		change_variable = {
			which = ruler_adm
			which = ruler_dip
		}
		change_variable = {
			which = ruler_adm
			which = ruler_mil
		}
		check_variable = {
			which = ruler_adm
			value = $stats$
		}
	}
}

ruler_total_stats_target = {
	variable_arithmetic_trigger = {
		custom_tooltip = $custom_tooltip$
		export_to_variable = {
			variable_name = ruler_adm
			value = ADM
			who = $who$
		}
		export_to_variable = {
			variable_name = ruler_dip
			value = DIP
			who = $who$
		}
		export_to_variable = {
			variable_name = ruler_mil
			value = MIL
			who = $who$
		}
		change_variable = {
			which = ruler_adm
			which = ruler_dip
		}
		change_variable = {
			which = ruler_adm
			which = ruler_mil
		}
		check_variable = {
			which = ruler_adm
			value = $stats$
		}
	}
}

heir_total_stats = {
	variable_arithmetic_trigger = {
		custom_tooltip = heir_total_stats_$stats$
		export_to_variable = {
			variable_name = heir_adm_var
			value = heir_adm
			who = ROOT
		}
		export_to_variable = {
			variable_name = heir_dip_var
			value = heir_dip
			who = ROOT
		}
		export_to_variable = {
			variable_name = heir_mil_var
			value = heir_mil
			who = ROOT
		}
		change_variable = {
			which = heir_adm_var
			which = heir_dip_var
		}
		change_variable = {
			which = heir_adm_var
			which = heir_mil_var
		}
		check_variable = {
			which = heir_adm_var
			value = $stats$
		}
	}
}

heir_total_stats_target = {
	variable_arithmetic_trigger = {
		custom_tooltip = $custom_tooltip$
		export_to_variable = {
			variable_name = heir_adm_var
			value = heir_adm
			who = $who$
		}
		export_to_variable = {
			variable_name = heir_dip_var
			value = heir_dip
			who = $who$
		}
		export_to_variable = {
			variable_name = heir_mil_var
			value = heir_mil
			who = $who$
		}
		change_variable = {
			which = heir_adm_var
			which = heir_dip_var
		}
		change_variable = {
			which = heir_adm_var
			which = heir_mil_var
		}
		check_variable = {
			which = heir_adm_var
			value = $stats$
		}
	}
}

consort_total_stats = {
	variable_arithmetic_trigger = {
		custom_tooltip = consort_total_stats_$stats$
		export_to_variable = {
			variable_name = consort_adm_var
			value = consort_adm
			who = ROOT
		}
		export_to_variable = {
			variable_name = consort_dip_var
			value = consort_dip
			who = ROOT
		}
		export_to_variable = {
			variable_name = consort_mil_var
			value = consort_mil
			who = ROOT
		}
		change_variable = {
			which = consort_adm_var
			which = consort_dip_var
		}
		change_variable = {
			which = consort_adm_var
			which = consort_mil_var
		}
		check_variable = {
			which = consort_adm_var
			value = $stats$
		}
	}
}

consort_total_stats_target = {
	variable_arithmetic_trigger = {
		custom_tooltip = $custom_tooltip$
		export_to_variable = {
			variable_name = consort_adm_var
			value = consort_adm
			who = $who$
		}
		export_to_variable = {
			variable_name = consort_dip_var
			value = consort_dip
			who = $who$
		}
		export_to_variable = {
			variable_name = consort_mil_var
			value = consort_mil
			who = $who$
		}
		change_variable = {
			which = consort_adm_var
			which = consort_dip_var
		}
		change_variable = {
			which = consort_adm_var
			which = consort_mil_var
		}
		check_variable = {
			which = consort_adm_var
			value = $stats$
		}
	}
}

num_of_ruler_traits = {
	calc_true_if = {
		desc = num_of_ruler_traits_tt
		ruler_has_personality = just_personality
		ruler_has_personality = righteous_personality
		ruler_has_personality = tolerant_personality
		ruler_has_personality = kind_hearted_personality
		ruler_has_personality = free_thinker_personality
		ruler_has_personality = well_connected_personality
		ruler_has_personality = calm_personality
		ruler_has_personality = careful_personality
		ruler_has_personality = secretive_personality
		ruler_has_personality = intricate_web_weaver_personality
		ruler_has_personality = fertile_personality
		ruler_has_personality = well_advised_personality
		ruler_has_personality = benevolent_personality
		ruler_has_personality = zealot_personality 
		ruler_has_personality = pious_personality
		ruler_has_personality = lawgiver_personality
		ruler_has_personality = midas_touched_personality
		ruler_has_personality = incorruptible_personality
		ruler_has_personality = architectural_visionary_personality
		ruler_has_personality = scholar_personality
		ruler_has_personality = entrepreneur_personality
		ruler_has_personality = industrious_personality
		ruler_has_personality = expansionist_personality
		ruler_has_personality = charismatic_negotiator_personality
		ruler_has_personality = silver_tongue_personality
		ruler_has_personality = conqueror_personality
		ruler_has_personality = tactical_genius_personality
		ruler_has_personality = bold_fighter_personality
		ruler_has_personality = strict_personality
		ruler_has_personality = inspiring_leader_personality
		ruler_has_personality = martial_educator_personality
		ruler_has_personality = navigator_personality
		ruler_has_personality = fierce_negotiator_personality
		ruler_has_personality = babbling_buffoon_personality
		ruler_has_personality = embezzler_personality
		ruler_has_personality = infertile_personality
		ruler_has_personality = drunkard_personality
		ruler_has_personality = sinner_personality
		ruler_has_personality = greedy_personality
		ruler_has_personality = cruel_personality
		ruler_has_personality = naive_personality
		ruler_has_personality = craven_personality
		ruler_has_personality = loose_lips_personality
		ruler_has_personality = obsessive_perfectionist_personality
		ruler_has_personality = malevolent_personality
		ruler_has_personality = immortal_personality
		amount = $amount$
	}
}

has_points_for_livonian_military_monarchy = {
	check_variable = {
		which = liv_mil
		value = 5
	}
}
has_points_for_livonian_naval_monarchy = {
	check_variable = {
		which = liv_dip
		value = 5
	}
}
has_points_for_livonian_trade_monarchy = {
	check_variable = {
		which = liv_adm
		value = 3
	}
	check_variable = {
		which = liv_dip
		value = 3
	}
}
has_points_for_livonian_constitutional_monarchy = {
	is_variable_equal = {
		which = liv_adm
		value = 3
	}
}
has_points_for_livonian_theocratic_monarchy = {
	check_variable = {
		which = liv_adm
		value = 3
	}
	check_variable = {
		which = liv_mil
		value = 3
	}
}
has_points_for_livonian_elective_monarchy = {
	check_variable = {
		which = liv_dip
		value = 3
	}
}
has_points_for_livonian_diplomatic_monarchy = {
	check_variable = {
		which = liv_dip
		value = 4
	}
}
has_points_for_livonian_administrative_monarchy = {
	check_variable = {
		which = liv_adm
		value = 5
	}
}
has_points_for_livonian_mercenary_monarchy = {
	check_variable = {
		which = liv_mil
		value = 3
	}
}
has_points_for_livonian_admiral_monarchy = {
	check_variable = {
		which = liv_dip
		value = 4
	}
}
has_points_for_livonian_naval_controlled_monarchy = {
	check_variable = {
		which = liv_dip
		value = 3
	}
	check_variable = {
		which = liv_mil
		value = 3
	}
}
has_points_for_livonian_general_controlled_monarchy = {
	check_variable = {
		which = liv_mil
		value = 4
	}
}
has_points_for_livonian_absolute_monarchy = {
	check_variable = {
		which = liv_adm
		value = 4
	}
}
has_points_for_livonian_enlightened_monarchy = {
	is_variable_equal = {
		which = liv_adm
		value = 2
	}
	is_variable_equal = {
		which = liv_dip
		value = 2
	}
	is_variable_equal = {
		which = liv_mil
		value = 2
	}
}

has_points_for_livonian_monarchy = {
	has_points_for_$government_reform$ = yes
}

is_allowed_to_recruit_mercenaries = {
	custom_trigger_tooltip = {
		tooltip = is_allowed_to_recruit_mercenaries_tt
		always = no
	}
}

has_no_religion_specific_government_available = {
	always = no
}

#Province scope
is_flatland = {
	custom_trigger_tooltip = {
		tooltip = is_flatland_tt
		OR = {
			has_terrain = farmlands
			has_terrain = grasslands
			has_terrain = steppe
			has_terrain = savannah
			has_terrain = drylands
			has_terrain = coastal_desert
			has_terrain = desert
			has_terrain = coastline
		}
	}
}

is_yellow_river_province_trigger = {
	custom_trigger_tooltip = {
		tooltip = is_yellow_river_province_trigger_tt
		always = no
	}
}

is_yangtze_river_province_trigger = {
	custom_trigger_tooltip = {
		tooltip = is_yangtze_river_province_trigger_tt
		always = no
	}
}

is_eyalet_trigger = {
	custom_trigger_tooltip = {
		tooltip = is_eyalet_trigger_tt
		always = no
	}
}

has_strong_mil_national_ideas = {
	custom_trigger_tooltip = {
		tooltip = has_strong_mil_national_ideas_tt
		always = no
	}
}

has_any_active_incomplete_idea_group_of_category = {
    [[adm_ideas]
        custom_trigger_tooltip = {
            tooltip = has_any_active_incomplete_idea_group_of_category_adm
            OR = {
                AND = { has_idea_group = innovativeness_ideas NOT = { full_idea_group = innovativeness_ideas } }
                AND = { has_idea_group = shadow_of_melkor_ideas NOT = { full_idea_group = shadow_of_melkor_ideas } }
                AND = { has_idea_group = light_of_eru_ideas	  NOT = { full_idea_group = light_of_eru_ideas } }
                AND = { has_idea_group = economic_ideas       NOT = { full_idea_group = economic_ideas } }
                AND = { has_idea_group = administrative_ideas NOT = { full_idea_group = administrative_ideas } }
                AND = { has_idea_group = humanist_ideas       NOT = { full_idea_group = humanist_ideas } }
                AND = { has_idea_group = infrastructure_ideas NOT = { full_idea_group = infrastructure_ideas } }
            }
        }
    ]
    [[dip_ideas]
        custom_trigger_tooltip = {
            tooltip = has_any_active_incomplete_idea_group_of_category_dip
            OR = {
                AND = { has_idea_group = spy_ideas         	NOT = { full_idea_group = spy_ideas } }
                AND = { has_idea_group = diplomatic_ideas  	NOT = { full_idea_group = diplomatic_ideas } }
                AND = { has_idea_group = trade_ideas       	NOT = { full_idea_group = trade_ideas } }
                AND = { has_idea_group = maritime_ideas    	NOT = { full_idea_group = maritime_ideas } }
                AND = { has_idea_group = influence_ideas   	NOT = { full_idea_group = influence_ideas } }
                AND = { has_idea_group = court_ideas       	NOT = { full_idea_group = court_ideas } }
            }
        }
    ]
    [[mil_ideas]
        custom_trigger_tooltip = {
            tooltip = has_any_active_incomplete_idea_group_of_category_mil
            OR = {
                AND = { has_idea_group = aristocracy_ideas       	NOT = { full_idea_group = aristocracy_ideas } }
                AND = { has_idea_group = offensive_ideas       		NOT = { full_idea_group = offensive_ideas } }
                AND = { has_idea_group = defensive_ideas       		NOT = { full_idea_group = defensive_ideas } }
                AND = { has_idea_group = quality_ideas           	NOT = { full_idea_group = quality_ideas } }
                AND = { has_idea_group = quantity_ideas             NOT = { full_idea_group = quantity_ideas } }
                AND = { has_idea_group = theocracy_gov_ideas   		NOT = { full_idea_group = theocracy_gov_ideas } }
                AND = { has_idea_group = indigenous_ideas      	    NOT = { full_idea_group = indigenous_ideas } }
                AND = { has_idea_group = horde_gov_ideas       	    NOT = { full_idea_group = horde_gov_ideas } }
                AND = { has_idea_group = plutocracy_ideas        	NOT = { full_idea_group = plutocracy_ideas } }
                AND = { has_idea_group = mercenary_ideas        	NOT = { full_idea_group = mercenary_ideas } }
                AND = { has_idea_group = naval_ideas				NOT = { full_idea_group = naval_ideas } }
            }
        }
    ]
}

has_unlocked_church_aspect = {
	has_country_flag = unlocked_church_aspect_$church_aspect$
}

has_increased_trade_goods_discovery = {
	has_country_flag = increased_trade_goods_discovery_$trade_goods$
}

has_stab_reduction_from_dip_action_modifier = {
	full_idea_group = diplomatic_ideas
}

is_not_eligible_for_trade_good_grain = {
	OR = {
		has_terrain = desert
		has_terrain = glacier
		has_terrain = coastline
		has_climate = arctic
	}
}
is_not_eligible_for_trade_good_wine = {
	OR = {
		has_winter = severe_winter
		has_climate = arctic
		has_climate = arid
		has_climate = tropical
		has_terrain = jungle
		has_terrain = drylands
		has_terrain = steppe
		has_terrain = desert
		has_terrain = coastal_desert
		has_terrain = marsh
		has_terrain = savannah
		has_terrain = glacier
	}
}
is_not_eligible_for_trade_good_wool = {
	OR = {
		has_terrain = glacier
		has_terrain = marsh
		has_terrain = jungle
		has_terrain = farmlands
		has_terrain = coastline
		has_terrain = hills
		has_terrain = forest
		has_terrain = woods
	}
}
is_not_eligible_for_trade_good_cloth = {
	NOT = { development_discounting_tribal = 15 }
}
is_not_eligible_for_trade_good_fish = {
	NOT = { has_port = yes }
}
is_not_eligible_for_trade_good_fur = {
	OR = {
		AND = {
			OR = {
				has_climate = tropical
				has_climate = arid
				has_terrain = drylands
				has_terrain = steppe
				has_terrain = desert
				has_terrain = coastal_desert
				has_terrain = coastline
			}
			NOT = { has_winter = normal_winter }
			NOT = { has_winter = severe_winter }
		}
		has_terrain = farmlands
		has_terrain = mountain
	}
}
is_not_eligible_for_trade_good_salt = {
	always = no
}
is_not_eligible_for_trade_good_naval_supplies = {
	OR = {
		has_terrain = glacier
		has_terrain = desert
		has_terrain = coastal_desert
		has_terrain = drylands
		has_terrain = savannah
		has_terrain = marsh
		has_terrain = steppe
		has_terrain = highlands
		has_terrain = farmlands
	}
}
is_not_eligible_for_trade_good_copper = {
	OR = {
		has_terrain = steppe
		has_terrain = desert
		has_terrain = coastal_desert
		has_terrain = drylands
		has_terrain = grasslands
		has_terrain = savannah
		has_terrain = coastline
		has_terrain = glacier
		has_terrain = jungle
		has_terrain = farmlands
		has_terrain = woods
	}
}
is_not_eligible_for_trade_good_gold = {
	always = no
}
is_not_eligible_for_trade_good_iron = {
	always = no
}
is_not_eligible_for_trade_good_slaves = {
	always = no
}
is_not_eligible_for_trade_good_ivory = {
	always = no
}
is_not_eligible_for_trade_good_tea = {
	always = no
}
is_not_eligible_for_trade_good_chinaware = {
	always = no
}
is_not_eligible_for_trade_good_spices = {
	always = no
}
is_not_eligible_for_trade_good_coffee = {
	always = no
}
is_not_eligible_for_trade_good_cotton = {
	always = no
}
is_not_eligible_for_trade_good_sugar = {
	always = no
}
is_not_eligible_for_trade_good_tobacco = {
	always = no
}
is_not_eligible_for_trade_good_cocoa = {
	always = no
}
is_not_eligible_for_trade_good_silk = {
	always = no
}
is_not_eligible_for_trade_good_dyes = {
	always = no
}
is_not_eligible_for_trade_good_tropical_wood = {
	always = no
}
is_not_eligible_for_trade_good_livestock = {
	always = no
}
is_not_eligible_for_trade_good_incense = {
	always = no
}
is_not_eligible_for_trade_good_glass = {
	always = no
}
is_not_eligible_for_trade_good_paper = {
	always = no
}
is_not_eligible_for_trade_good_gems = {
	always = no
}
is_not_eligible_for_trade_good_coal = {
	always = yes	#Should never be available
}
is_not_eligible_for_trade_good_cloves = {
	always = no
}
is_not_eligible_for_trade_good_unknown = {
	always = yes
}

has_chance_scaling_cost = {
	always = no
}

# Province scope
# Supports the following trade goods
####################################
# grain
# wine
# wool
# cloth
# fish
# fur
# salt
# naval_supplies
# copper
# gold
# iron
# slaves
# ivory
# tea
# chinaware
# spices
# coffee
# cotton
# sugar
# tobacco
# cocoa
# silk
# dyes
# tropical_wood
# livestock
# incense
# glass
# paper
# gems
# coal
# cloves
# unknown
is_eligible_for_trade_good = {
	NOT = { trade_goods = $trade_goods$ }
	NOT = { is_not_eligible_for_trade_good_$trade_goods$ = yes }
}

has_updated_culture = {
	has_global_flag = updated_$culture$_flag
}

is_eligible_for_statists_monarchist_events = {
	NOT = { has_government_attribute = theocratic_monarchy_mechanic }
	NOT = { has_government_attribute = has_co_rulership }
}

has_modifier_locking_military_tier = {
	has_country_modifier = new_order_regiment_mobilized_modifier
}

has_not_modifier_locking_military_tier = {
	custom_trigger_tooltip = {
		tooltip = has_modifier_locking_military_tier_tt
		NOT = { has_modifier_locking_military_tier = yes }
	}
}